#Область ОсновныеПроцедуры

Процедура ЗагрузитьИзРегистраЗаказовМонолит() Экспорт
	
	Параметры 			 	= Новый Массив;
	МассивСтруктурШлюзов 	= Новый Массив;
	Запрос 					= Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаАктуальныеШлюзы();
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоШлюзовВПакете = 7;
	
	НомерШлюза = 1;
		
	ОбщееКоличествоШлюзов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл	
	
		СтруктурыШлюзов = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		ЗаполнитьЗначенияСвойств(СтруктурыШлюзов, Выборка);
		СтруктурыШлюзов.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMOrder;
		
		МассивСтруктурШлюзов.Добавить(СтруктурыШлюзов);
		
		Если (НомерШлюза <> 1 И КоличествоШлюзовВПакете % НомерШлюза = 0) ИЛИ НомерШлюза = ОбщееКоличествоШлюзов Тогда			
			
			Параметры.Добавить(МассивСтруктурШлюзов);
			
			//Собранные пакеты шлюзов
			ВыполнитьЧтениеРегистраФоном(МассивСтруктурШлюзов);
			
			//ФоновыеЗадания.Выполнить("Mon_ЧтениеРегистра.ВыполнитьЧтениеРегистраФоном", 
			//	Параметры, Новый УникальныйИдентификатор, "Фоновое выполнение СRMMonolit");	
				
			Параметры.Очистить();
				
		КонецЕсли;
		
		НомерШлюза = НомерШлюза + 1;					
		
	КонецЦикла;
		
	
КонецПроцедуры

Процедура ВыполнитьЧтениеРегистраФоном(ПараметрыФоновогоЗадания) Экспорт
	
		
	Для Каждого Элемент Из ПараметрыФоновогоЗадания Цикл  
		Запрос = Новый Запрос();
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый); 
		
		Если Элемент.КоличествоЗапросовКПеречитке = 0 Тогда
			
			Запрос.Текст = "ВЫБРАТЬ
					|	Mon_ВходящиеДанные.ШлюзОрганизации КАК ШлюзОрганизации,
					|	Mon_ВходящиеДанные.ВидОбмена КАК ВидОбмена,
					|	Mon_ВходящиеДанные.ДатаЗагрузки КАК ДатаЗагрузки,
					|	Mon_ВходящиеДанные.ТекстОбмена КАК ТекстОбмена
					|ИЗ
					|	РегистрСведений.Mon_ВходящиеДанные КАК Mon_ВходящиеДанные
					|ГДЕ
					|	Mon_ВходящиеДанные.ШлюзОрганизации = &ШлюзОрганизации
					|	И Mon_ВходящиеДанные.ВидОбмена = &ВидОбмена
					//|	И Mon_ВходящиеДанные.ДатаОбработки = ДАТАВРЕМЯ(1, 1, 1)
					|	И Mon_ВходящиеДанные.Статус = &Статус
					|
					|ДЛЯ ИЗМЕНЕНИЯ
					|	РегистрСведений.Mon_ВходящиеДанные
					|
                  	|УПОРЯДОЧИТЬ ПО
                  	|	ДатаЗагрузки УБЫВ";
			
		Иначе
			
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
                  |	Mon_ВходящиеДанные.ШлюзОрганизации КАК ШлюзОрганизации,
                  |	Mon_ВходящиеДанные.ВидОбмена КАК ВидОбмена,
                  |	Mon_ВходящиеДанные.ДатаЗагрузки КАК ДатаЗагрузки,
                  |	Mon_ВходящиеДанные.ТекстОбмена КАК ТекстОбмена
                  |ИЗ
                  |	РегистрСведений.Mon_ВходящиеДанные КАК Mon_ВходящиеДанные
                  |ГДЕ
                  |	Mon_ВходящиеДанные.ШлюзОрганизации = &ШлюзОрганизации
                  |	И Mon_ВходящиеДанные.ВидОбмена = &ВидОбмена
                  |
                  |ДЛЯ ИЗМЕНЕНИЯ
                  |	РегистрСведений.Mon_ВходящиеДанные
                  |
                  |УПОРЯДОЧИТЬ ПО
                  |	ДатаЗагрузки УБЫВ";
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "ПЕРВЫЕ " + Элемент.КоличествоЗапросовКПеречитке);
		
		Запрос.УстановитьПараметр("ШлюзОрганизации",Элемент.ШлюзОрганизации);
		
		Запрос.УстановитьПараметр("ВидОбмена", Элемент.ВидОбмена);
		Запрос.УстановитьПараметр("Статус", Перечисления.Mon_СтатусыОбработкиСтрокиРегистра.НеОбработано);
			
		ТЗНеобработанные = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаИзТЗ Из ТЗНеобработанные Цикл
			
			Запись = РегистрыСведений.Mon_ВходящиеДанные.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(Запись, СтрокаИзТЗ);
			Запись.Статус = Перечисления.Mon_СтатусыОбработкиСтрокиРегистра.ВРаботе;
			
			Запись.Записать(Истина);
			
		КонецЦикла;	
		
		ЗафиксироватьТранзакцию();

		Для Каждого СтрокаИзТЗ Из ТЗНеобработанные Цикл
			
			Запись = РегистрыСведений.Mon_ВходящиеДанные.СоздатьМенеджерЗаписи();	
			
			ЗаполнитьЗначенияСвойств(Запись, СтрокаИзТЗ);			
			ТекстОбменаXML = СтрокаИзТЗ.ТекстОбмена;
			
			Попытка
				
				Если Элемент.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMOrder Тогда
					
					Если Найти(СтрокаСоединенияИнформационнойБазы(), "ut_leb") > 0 Тогда
						
						СоответствиеДанныхXML = Неопределено;
					
						Mon_Парсер.МонолитПарсерРасширенный( ТекстОбменаXML, СоответствиеДанныхXML );
						
						ЗагрузитьЗаказыИРеализацииПоСпискуДокументовИзСоответствияДанныхXML(Элемент, СоответствиеДанныхXML);
					Иначе
						
						СписокДокументов = Неопределено;

						Mon_Парсер.МонолитЗагрузка( ТекстОбменаXML, СписокДокументов );
						ЗагрузитьЗаказыИРеализацииПоСпискуДокументов(Элемент, СписокДокументов);
						
							
					КонецЕсли;
				
				Иначе
					
					СоответствиеДанныхXML = Неопределено;
					
					Mon_Парсер.МонолитПарсерРасширенный( ТекстОбменаXML, СоответствиеДанныхXML );
					ЗагрузитьПКОПоСпискуДокументов(Элемент, СоответствиеДанныхXML);	
					
				КонецЕсли;
				

				
				Запись.Статус = Перечисления.Mon_СтатусыОбработкиСтрокиРегистра.ОбработаноУспешно;
					
			Исключение
				
				Запись.Статус = Перечисления.Mon_СтатусыОбработкиСтрокиРегистра.НеОбработано;
				а = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации( "ЗагрузкаМонолитОшибка", УровеньЖурналаРегистрации.Ошибка,
				,"", а);

			КонецПопытки;
			
			Запись.ДатаОбработки = ТекущаяДата();	
			Запись.Записать(Истина);
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры



Процедура ЗагрузитьЗаказыИРеализацииПоСпискуДокументовИзСоответствияДанныхXML(СтруктураШлюза, СоответствиеДанныхXML)


	ТЗДокументов = Новый ТаблицаЗначений;
	
	ТЗДокументов.Колонки.Добавить( "ActionDate", 	Mon_Общий.УстановитьТипДанных( Тип("Дата")));
	ТЗДокументов.Колонки.Добавить( "AddressId", 	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 200)); 
	ТЗДокументов.Колонки.Добавить( "CRMClientId", 	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 200)); 
	ТЗДокументов.Колонки.Добавить( "CompanyId",		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 300));
	ТЗДокументов.Колонки.Добавить( "CreateId", 		Mon_Общий.УстановитьТипДанных( Тип("Число")));
	ТЗДокументов.Колонки.Добавить( "CRMDbId",		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗДокументов.Колонки.Добавить( "CRMOrderDate", 	Mon_Общий.УстановитьТипДанных( Тип("Дата")));
	ТЗДокументов.Колонки.Добавить( "CRMOrderNumber",Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30)); 
	ТЗДокументов.Колонки.Добавить( "CRMPayKindId",  Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30)); 
	ТЗДокументов.Колонки.Добавить( "CRMWareHouseId",Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗДокументов.Колонки.Добавить( "PersonId", 		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30)); 
	ТЗДокументов.Колонки.Добавить( "StatusId",		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗДокументов.Колонки.Добавить( "DocumentTypeId",Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗДокументов.Колонки.Добавить( "DiscountType",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗДокументов.Колонки.Добавить( "Summa", 		Mon_Общий.УстановитьТипДанных( Тип("Число"), 15, 3));
	ТЗДокументов.Колонки.Добавить( "WareHouseId",   Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30)); 
	
	
	ТЗСтрокиДокументов = Новый ТаблицаЗначений;
	ТЗСтрокиДокументов.Колонки.Добавить( "CRMOrderDate",	Mon_Общий.УстановитьТипДанных( Тип("Дата"))); 
	ТЗСтрокиДокументов.Колонки.Добавить( "CRMOrderNumber",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 100));
	ТЗСтрокиДокументов.Колонки.Добавить( "CRMWareHouseId",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗСтрокиДокументов.Колонки.Добавить( "Price",			Mon_Общий.УстановитьТипДанных( Тип("Число"), 15, 3));
	ТЗСтрокиДокументов.Колонки.Добавить( "LineNumber",		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗСтрокиДокументов.Колонки.Добавить( "Quantity",		Mon_Общий.УстановитьТипДанных( Тип("Число"), 15, 3));
	ТЗСтрокиДокументов.Колонки.Добавить( "UnitId",			Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗСтрокиДокументов.Колонки.Добавить( "WareHouseId",		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗСтрокиДокументов.Колонки.Добавить( "WareId",			Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗСтрокиДокументов.Колонки.Добавить( "Discount",		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));

	ТЗДопСведенийВДокументе = Новый ТаблицаЗначений; 
	ТЗДопСведенийВДокументе.Колонки.Добавить( "CRMOrderDate",	Mon_Общий.УстановитьТипДанных( Тип("Дата")));
	ТЗДопСведенийВДокументе.Колонки.Добавить( "CRMOrderNumber",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 100));
	ТЗДопСведенийВДокументе.Колонки.Добавить( "OptionTypeId",	Mon_Общий.УстановитьТипДанных( Тип("Строка"),100));	
	ТЗДопСведенийВДокументе.Колонки.Добавить( "Value",		 	Mon_Общий.УстановитьТипДанных( Тип("Строка"),100));
	ТЗДопСведенийВДокументе.Колонки.Добавить( "OptionTypeName",	Mon_Общий.УстановитьТипДанных( Тип("Строка"),30));
	
	ТЗКонтрАгентов = Новый ТаблицаЗначений;
	ТЗКонтрАгентов.Колонки.Добавить( "CRMClientId",		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 200));
	ТЗКонтрАгентов.Колонки.Добавить( "CRMClientName",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 200));	
	ТЗКонтрАгентов.Колонки.Добавить( "CRMClientAddress",Mon_Общий.УстановитьТипДанных( Тип("Строка"), 200));
	ТЗКонтрАгентов.Колонки.Добавить( "CRMLegalName",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 200));	
	
	ТЗДопСведений = Новый ТаблицаЗначений; 
	ТЗДопСведений.Колонки.Добавить( "CRMOrderDate",		Mon_Общий.УстановитьТипДанных( Тип("Дата")));
	ТЗДопСведений.Колонки.Добавить( "CRMOrderNumber",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 100));	
	ТЗДопСведений.Колонки.Добавить( "LineNumber",		Mon_Общий.УстановитьТипДанных( Тип("Число")));
	ТЗДопСведений.Колонки.Добавить( "OptionTypeId",		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));
	ТЗДопСведений.Колонки.Добавить( "Value",			Mon_Общий.УстановитьТипДанных( Тип("Строка"), 200));
	ТЗДопСведений.Колонки.Добавить( "OptionTypeName",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30));

	СписокДокументов = СоответствиеДанныхXML["CRMOrder"];
	
	Для Каждого Док из СписокДокументов Цикл
		
		НоваяСтрока = ТЗДокументов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Док);
		Для Каждого СтрокаИзЗаказа Из Док.CRMOrderLine Цикл
			СтрокаИзЗаказаВТЗ = ТЗСтрокиДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзЗаказаВТЗ, Док);
			ЗаполнитьЗначенияСвойств(СтрокаИзЗаказаВТЗ, СтрокаИзЗаказа);		
		КонецЦикла;
		Для Каждого СтрокаИзЗаказа Из Док.CRMOrderOption Цикл
			СтрокаИзЗаказаВТЗ = ТЗДопСведенийВДокументе.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзЗаказаВТЗ, Док);
			ЗаполнитьЗначенияСвойств(СтрокаИзЗаказаВТЗ, СтрокаИзЗаказа);		
		КонецЦикла;	
		
	КонецЦикла;

	СписокКонтрагентов = СоответствиеДанныхXML["CRMContragentOut"];
	Для Каждого Контрагент из СписокКонтрагентов Цикл
		
		НоваяСтрока = ТЗКонтрАгентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Контрагент);
				
	КонецЦикла;

	СписокПримечаний = СоответствиеДанныхXML["CRMOrderLineOption"];
	Для Каждого Примечание из СписокПримечаний Цикл
		
		НоваяСтрока = ТЗДопСведений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Примечание);
		
	КонецЦикла;


	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗДокументов.ActionDate,
	|	ТЗДокументов.AddressId,
	|	ТЗДокументов.CRMClientId,
	|	ТЗДокументов.CompanyId,
	|	ТЗДокументов.CreateId,
	|	ТЗДокументов.CRMDbId,
	|	ТЗДокументов.CRMOrderDate,
	|	ТЗДокументов.CRMOrderNumber,
	|	ТЗДокументов.CRMPayKindId,
	|	ТЗДокументов.CRMWareHouseId,
	|	ТЗДокументов.PersonId,
	|	ТЗДокументов.StatusId,
	|	ТЗДокументов.Summa,
	|	ТЗДокументов.WareHouseId,
	|	ТЗДокументов.DocumentTypeId,
	|	ТЗДокументов.DiscountType
	|ПОМЕСТИТЬ ВТ_ТЗДокументов
	|ИЗ
	|	&ТЗДокументов КАК ТЗДокументов
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗСтрокиДокументов.CRMOrderDate,
	|	ТЗСтрокиДокументов.CRMOrderNumber,
	|	ТЗСтрокиДокументов.CRMWareHouseId,
	|	ТЗСтрокиДокументов.Price,
	|	ТЗСтрокиДокументов.LineNumber,
	|	ТЗСтрокиДокументов.Quantity,
	|	ТЗСтрокиДокументов.UnitId,
	|	ТЗСтрокиДокументов.WareHouseId,
	|	ТЗСтрокиДокументов.WareId,
	|	ТЗСтрокиДокументов.Discount
	|ПОМЕСТИТЬ ВТ_ТЗСтрокиДокументов
	|ИЗ
	|	&ТЗСтрокиДокументов КАК ТЗСтрокиДокументов
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗДопСведенийВДокументе.CRMOrderDate,
	|	ТЗДопСведенийВДокументе.CRMOrderNumber,
	|	ТЗДопСведенийВДокументе.OptionTypeId,
	|	ТЗДопСведенийВДокументе.Value,
	|	ТЗДопСведенийВДокументе.OptionTypeName
	|ПОМЕСТИТЬ ВТ_ТЗДопСведенийВДокументе
	|ИЗ
	|	&ТЗДопСведенийВДокументе КАК ТЗДопСведенийВДокументе
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗКонтрАгентов.CRMClientId,
	|	ТЗКонтрАгентов.CRMClientName,
	|	ТЗКонтрАгентов.CRMClientAddress,
	|	ТЗКонтрАгентов.CRMLegalName
	|ПОМЕСТИТЬ ВТ_ТЗКонтрАгентов
	|ИЗ
	|	&ТЗКонтрАгентов КАК ТЗКонтрАгентов
	|;
	|
	|
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗДопСведений.CRMOrderDate,
	|	ТЗДопСведений.CRMOrderNumber,
	|	ТЗДопСведений.LineNumber,
	|	ТЗДопСведений.OptionTypeId,
	|	ТЗДопСведений.Value,
	|	ТЗДопСведений.OptionTypeName
	|ПОМЕСТИТЬ ВТ_ТЗДопСведений
	|ИЗ
	|	&ТЗДопСведений КАК ТЗДопСведений
	|;
	|
	|
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДополнительныеСведения.Объект) КАК Партнер,
	|	ДополнительныеСведения.Значение КАК КодТорговойТочки
	|ПОМЕСТИТЬ ВТ_СоответствияТорговыхТочек
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Партнеры
	|	И ДополнительныеСведения.Свойство.Имя = ""КодМонолитБалтикаПартнеры""
	|	И ДополнительныеСведения.Значение В
	|		(ВЫБРАТЬ
	|			ВТ.CRMClientId
	|		ИЗ
	|			ВТ_ТЗКонтрАгентов КАК ВТ)
	|СГРУППИРОВАТЬ ПО
	|	ДополнительныеСведения.Значение
	|;
	|
	|
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Mon_ШлюзыОрганизацииСклады.КодСклада,
	|	МАКСИМУМ(Mon_ШлюзыОрганизацииСклады.Ссылка) КАК Шлюз,
	|	МАКСИМУМ(Mon_ШлюзыОрганизацииСклады.Ссылка.Организация) КАК Организация,
	|	МАКСИМУМ(Mon_ШлюзыОрганизацииСклады.Ссылка.ОрганизацияФ2) КАК ОрганизацияФ2,
	|	МАКСИМУМ(Mon_ШлюзыОрганизацииСклады.Склад) КАК Склад
	|ПОМЕСТИТЬ ВТ_СкладыИзШлюзов
	|ИЗ
	|	Справочник.Mon_ШлюзыОрганизации.Склады КАК Mon_ШлюзыОрганизацииСклады
	|СГРУППИРОВАТЬ ПО
	|	Mon_ШлюзыОрганизацииСклады.КодСклада
	|;
	|
	|
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Mon_ШлюзыОрганизацииТорговыеПредставители.КодТорговогоПредставителя,
	|	МАКСИМУМ(Mon_ШлюзыОрганизацииТорговыеПредставители.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(Mon_ШлюзыОрганизацииТорговыеПредставители.ТорговыйПредставитель) КАК ТорговыйПредставитель
	|ПОМЕСТИТЬ ВТ_Менеджеры
	|ИЗ
	|	Справочник.Mon_ШлюзыОрганизации.ТорговыеПредставители КАК Mon_ШлюзыОрганизацииТорговыеПредставители
	|СГРУППИРОВАТЬ ПО
	|	Mon_ШлюзыОрганизацииТорговыеПредставители.КодТорговогоПредставителя
	|;
	|
	|
	|
	|
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Mon_СоответствияНоменклатуры.ТипМонолита,
	|	Mon_СоответствияНоменклатуры.Номенклатура,
	|	Mon_СоответствияНоменклатуры.Упаковка,
	|	Mon_СоответствияНоменклатуры.УпаковкаМонолит,
	|	Mon_СоответствияНоменклатуры.НоменклатураМонолит,
	|	Mon_СоответствияНоменклатуры.Коэффициент
	|ПОМЕСТИТЬ ВТ_СоответствияНоменклатуры
	|ИЗ
	|	РегистрСведений.Mon_СоответствияНоменклатуры КАК Mon_СоответствияНоменклатуры
	|ГДЕ
	|	Mon_СоответствияНоменклатуры.НоменклатураМонолит В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВТ_ТЗСтрокиДокументов.WareId
	|		ИЗ
	|			ВТ_ТЗСтрокиДокументов КАК ВТ_ТЗСтрокиДокументов)
	|;
	|
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект
	|ПОМЕСТИТЬ ВТ_БонусныеСклады
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство.Имя = ""Бонусный_a9b08a37d0024727a9536c21c2fcce3e""
	|	И ДополнительныеСведения.Значение = ИСТИНА
	|;
	|
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокЗагрузки.Ссылка КАК Документ,
	|	ВЫБОР
	|		КОГДА ДокЗагрузки.ПометкаУдаления
	|			ТОГДА ""УДАЛЕН""
	|		КОГДА ДокЗагрузки.Проведен
	|			ТОГДА ""ПРОВЕДЕН""
	|		ИНАЧЕ ""КЗАГРУЗКЕ""
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ ВТ_СоответствияДокументовЗагрузки
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокЗагрузки
	|ГДЕ
	|	ДокЗагрузки.НомерПоДаннымКлиента В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВТ_ТЗДокументов.CRMOrderNumber
	|		ИЗ
	|			ВТ_ТЗДокументов КАК ВТ_ТЗДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокЗагрузки.Ссылка КАК Документ,
	|	ВЫБОР
	|		КОГДА ДокЗагрузки.ПометкаУдаления
	|			ТОГДА ""УДАЛЕН""
	|		КОГДА ДокЗагрузки.Проведен
	|			ТОГДА ""ПРОВЕДЕН""
	|		ИНАЧЕ ""КЗАГРУЗКЕ""
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДокЗагрузки
	|ГДЕ
	|	ДокЗагрузки.НомерВходящегоДокумента В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВТ_ТЗДокументов.CRMOrderNumber
	|		ИЗ
	|			ВТ_ТЗДокументов КАК ВТ_ТЗДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Документ,
	|	ВЫБОР
	|		КОГДА ДополнительныеСведения.Объект.ПометкаУдаления
	|			ТОГДА ""УДАЛЕН""
	|		КОГДА ДополнительныеСведения.Объект.Проведен
	|			ТОГДА ""ПРОВЕДЕН""
	|		ИНАЧЕ ""КЗАГРУЗКЕ""
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ВНУТРЕННЕЕ соединение Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ПО ДополнительныеСведения.Объект = ПеремещениеТоваров.Ссылка
	|ГДЕ
	|	ДополнительныеСведения.Свойство.Имя = ""НомерЗаказаМонолитПеремещениеТоваров""
	|	И ДополнительныеСведения.Значение В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВТ_ТЗДокументов.CRMOrderNumber
	|		ИЗ
	|			ВТ_ТЗДокументов КАК ВТ_ТЗДокументов)
	|;
	|
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|Выбрать
	|	ВТ_ТЗСтрокиДокументов.CRMOrderDate,
	|	ВТ_ТЗСтрокиДокументов.CRMOrderNumber,
	|	ВТ_ТЗСтрокиДокументов.CRMWareHouseId,
	|	ВТ_ТЗСтрокиДокументов.Price,
	|	ВТ_ТЗСтрокиДокументов.LineNumber,
	|	ВТ_ТЗСтрокиДокументов.Quantity,
	|	ВТ_ТЗСтрокиДокументов.UnitId,
	|	ВТ_ТЗСтрокиДокументов.WareHouseId,
	|	ВТ_ТЗСтрокиДокументов.WareId,
	|	ВТ_ТЗСтрокиДокументов.Discount,
	|	ВТ_СоответствияНоменклатуры.ТипМонолита,
	|	ВТ_СоответствияНоменклатуры.Номенклатура,
	|	ВТ_СоответствияНоменклатуры.Упаковка,
	|	ВТ_СоответствияНоменклатуры.УпаковкаМонолит,
	|	ВТ_СоответствияНоменклатуры.НоменклатураМонолит,
	|	ВТ_СоответствияНоменклатуры.Коэффициент,
	|	ВЫБОР
	|		КОГДА ВТ_СоответствияНоменклатуры.Номенклатура IS NULL
	|		ИЛИ ВТ_СоответствияНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ВТ_ТЗСтрокиДокументов.Quantity
	|		КОГДА НЕ ВТ_СоответствияНоменклатуры.Номенклатура IS NULL
	|		И НЕ ВТ_СоответствияНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ВТ_СоответствияНоменклатуры.Упаковка = Фасовка.Значение
	|			ТОГДА ВТ_ТЗСтрокиДокументов.Quantity * ВТ_СоответствияНоменклатуры.Коэффициент
	|		КОГДА НЕ ВТ_СоответствияНоменклатуры.Номенклатура IS NULL
	|		И НЕ ВТ_СоответствияНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И (ВТ_СоответствияНоменклатуры.Упаковка = Фасовка.Значение
	|		ИЛИ ВТ_СоответствияНоменклатуры.Упаковка = РозливЛитры.Ссылка)
	|		И ВТ_СоответствияНоменклатуры.УпаковкаМонолит = ""l""
	|			ТОГДА ВТ_ТЗСтрокиДокументов.Quantity
	|		КОГДА НЕ ВТ_СоответствияНоменклатуры.Номенклатура IS NULL
	|		И НЕ ВТ_СоответствияНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И (ВТ_СоответствияНоменклатуры.Упаковка = Розлив.Значение
	|		ИЛИ ВТ_СоответствияНоменклатуры.Упаковка = РозливЛитры.Ссылка)
	|		И НЕ ВТ_СоответствияНоменклатуры.УпаковкаМонолит = ""l""
	|			ТОГДА ВТ_ТЗСтрокиДокументов.Quantity * ВТ_СоответствияНоменклатуры.Коэффициент / 0.033333333
	|		ИНАЧЕ ВТ_ТЗСтрокиДокументов.Quantity
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ВТ_СоответствияНоменклатуры.Номенклатура IS NULL
	|		ИЛИ ВТ_СоответствияНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ВТ_ТЗСтрокиДокументов.Quantity
	|		КОГДА НЕ ВТ_СоответствияНоменклатуры.Номенклатура IS NULL
	|		И НЕ ВТ_СоответствияНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ВТ_СоответствияНоменклатуры.Упаковка = Фасовка.Значение
	|			ТОГДА ВТ_ТЗСтрокиДокументов.Quantity * ВТ_СоответствияНоменклатуры.Коэффициент
	|		КОГДА НЕ ВТ_СоответствияНоменклатуры.Номенклатура IS NULL
	|		И НЕ ВТ_СоответствияНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И (ВТ_СоответствияНоменклатуры.Упаковка = Фасовка.Значение
	|		ИЛИ ВТ_СоответствияНоменклатуры.Упаковка = РозливЛитры.Ссылка)
	|		И ВТ_СоответствияНоменклатуры.УпаковкаМонолит = ""l""
	|			ТОГДА ВТ_ТЗСтрокиДокументов.Quantity
	|		КОГДА НЕ ВТ_СоответствияНоменклатуры.Номенклатура IS NULL
	|		И НЕ ВТ_СоответствияНоменклатуры.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И (ВТ_СоответствияНоменклатуры.Упаковка = Розлив.Значение
	|		ИЛИ ВТ_СоответствияНоменклатуры.Упаковка = РозливЛитры.Ссылка)
	|		И НЕ ВТ_СоответствияНоменклатуры.УпаковкаМонолит = ""l""
	|			ТОГДА ВТ_ТЗСтрокиДокументов.Quantity * ВТ_СоответствияНоменклатуры.Коэффициент / 0.033333333
	|		ИНАЧЕ ВТ_ТЗСтрокиДокументов.Quantity
	|	КОНЕЦ КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТ_ТЗСтрокиДокументовССоответствиями
	|ИЗ
	|	ВТ_ТЗСтрокиДокументов КАК ВТ_ТЗСтрокиДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствияНоменклатуры КАК ВТ_СоответствияНоменклатуры
	|		ПО ВТ_ТЗСтрокиДокументов.WareId = ВТ_СоответствияНоменклатуры.НоменклатураМонолит
	|		И ВТ_ТЗСтрокиДокументов.UnitId = ВТ_СоответствияНоменклатуры.УпаковкаМонолит
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ЕдиницаИзмеренияКоличестваШтук КАК Фасовка
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ЕдиницаИзмеренияРазливнойПродукции КАК Розлив
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК РозливЛитры
	|		ПО (РозливЛитры.Код = ""112"")";
	
	
	Запрос.УстановитьПараметр("ТЗДокументов", 				ТЗДокументов);
	Запрос.УстановитьПараметр("ТЗКонтрАгентов", 			ТЗКонтрАгентов);
	Запрос.УстановитьПараметр("ТЗДопСведений", 				ТЗДопСведений);	
	Запрос.УстановитьПараметр("ТЗСтрокиДокументов",			ТЗСтрокиДокументов);
	Запрос.УстановитьПараметр("ТЗДопСведенийВДокументе",	ТЗДопСведенийВДокументе);
	Запрос.УстановитьПараметр("АтрибутПроводная",			СтруктураШлюза.ШлюзОрганизации.ТипМонолита.АтрибутПроводная);


	
	ТЗ = Запрос.Выполнить().Выгрузить();

	а=1;

КонецПроцедуры

Процедура ЗагрузитьЗаказыИРеализацииПоСпискуДокументов(СтруктураШлюза, СписокДокументов)
	
	//КоличествоОшибокВЗаказе = 0;
	
	ВалютаРубль = Справочники.Валюты.НайтиПоКоду("643");
	
	ПользовательMonolit = Справочники.Пользователи.НайтиПоНаименованию("monolit");
	
	Розлив 	= Константы.ЕдиницаИзмеренияРазливнойПродукции.Получить();
	Фасовка = Константы.ЕдиницаИзмеренияКоличестваШтук.Получить();
	РозливЛитры	= Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду("112");
	
	ПриоритетСредний = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	
	СоответствиеБонусныхСкладов = ЗаполнитьСоответствиеБонусныхСкладов();
		
	Для Каждого Строка из СписокДокументов Цикл
		
		ЭтоЗаказ 	= Строка.DocumentTypeId = "CustOrder";
		ЭтоВозврат 	= Строка.DocumentTypeId = "CustReturn";
		
		Если НЕ ЭтоЗаказ И НЕ ЭтоВозврат Тогда
			Продолжить;
		КонецЕсли;
		
		
		НомерЗаказа = Строка.CRMOrderNumber;
		ДатаЗаказа       = Строка.CRMOrderDate;
		СтруктураРеквизитовДокумента = Mon_Общий.ЗаполнитьСтруктуруРеквизитовДокумента(СтруктураШлюза.ШлюзОрганизации);
		
		//НачатьТранзакцию();
		
		СсылкаНаДокумент = ЗагруженДокумент(СтруктураШлюза, НомерЗаказа, ДатаЗаказа, Строка.DocumentTypeId);
		ТекущаяДата = ТекущаяДата();
		ТекущееВремя = ТекущаяДата - НачалоДня(ТекущаяДата);
		
		Если СсылкаНаДокумент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		///*-Нужно посмотреть найденный контрагент - партнер записан в сопоставлениях в складе с розницей?? 
		ПартнерДляДокумента	= ВернутьПартнера(СтруктураРеквизитовДокумента, Строка.CRMClientId);
		РозничныйСклад = ВернутьРозничныйСклад(СтруктураРеквизитовДокумента, ПартнерДляДокумента);
		
		//*-если партнер есть в складах шлюза, как розничный магазин, то указываем 
		
		//@skip-warning Поскольку это расширение, то не надо сюда.
		Если НЕ РозничныйСклад = Справочники.Склады.ПустаяСсылка() И РозничныйСклад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
			
			ТипДокументаЗагрузки = "ПеремещениеТоваров";
			
		Иначе
			
			ТипДокументаЗагрузки = ?(Строка.DocumentTypeId = "CustReturn", "ВозвратТоваровОтКлиента", "ЗаказКлиента");
			
		КонецЕсли;
		
		//Если СсылкаНаДокумент = Документы[ТипДокументаЗагрузки].ПустаяСсылка() Тогда
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент) Тогда		
			НовыйДокумент = Документы[ТипДокументаЗагрузки].СоздатьДокумент();
		Иначе
			НовыйДокумент = СсылкаНаДокумент.Получитьобъект();			
		КонецЕсли;
		
		//*- Начало Заполнение общих реквизитов Возвратов и Заказов

		СтруктураРеквизитовДокумента.НомерЗаказа      = НомерЗаказа;
		СтруктураРеквизитовДокумента.ДатаЗаказа       = Строка.CRMOrderDate;
		СтруктураРеквизитовДокумента.ДатаОтгрузки     = Строка.ActionDate;
		НовыйДокумент.Дата = ТекущаяДата();
		НовыйДокумент.Организация 				= ВернутьОрганизацию(СтруктураРеквизитовДокумента, СтруктураШлюза, Строка.CRMOrderOption, СоответствиеБонусныхСкладов);		
		
		
		Если ТипДокументаЗагрузки = "ПеремещениеТоваров" Тогда 
			НовыйДокумент.Дата = Строка.ActionDate + (ТекущаяДата() - НачалоДня(ТекущаяДата()));
			НовыйДокумент.СкладОтправитель			= ВернутьСклад(СтруктураРеквизитовДокумента, Строка.WarehouseID);
			НовыйДокумент.СкладПолучатель			= РозничныйСклад;
			НовыйДокумент.БанковскийСчетОрганизации = Mon_Общий.ПолучитьБанковскийСчетОрганизацииПоУмолчаниюКастомная(НовыйДокумент.Организация, ВалютаРубль);
			НовыйДокумент.СпособДоставки 			= Перечисления.СпособыДоставки.ДоКлиента;
			НовыйДокумент.Статус 					= Перечисления.СтатусыПеремещенийТоваров.Принято;
			НовыйДокумент.ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
			НовыйДокумент.АдресДоставки 			= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(НовыйДокумент.СкладПолучатель, Справочники.ВидыКонтактнойИнформации.АдресСклада);
			НовыйДокумент.Ответственный				= ВернутьМенеджера(СтруктураРеквизитовДокумента, Строка.PersonID);
			НовыйДокумент.ВариантПриемкиТоваров 	= Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
			НовыйДокумент.ВидЦены 					= РозничныйСклад.РозничныйВидЦены;
			НовыйДокумент.Подразделение 			= НовыйДокумент.СкладОтправитель.Подразделение;
			//ВернутьМенеджера(СтруктураРеквизитовДокумента, Строка.PersonID);
			//ВернутьДоговорПоОрганизацииМенеджеруПартнеру(СтруктураРеквизитовДокумента);
			//Если ЗначениеЗаполнено(СтруктураРеквизитовДокумента.Договор) Тогда
			//	НовыйДокумент.Подразделение = СтруктураРеквизитовДокумента.Договор.Подразделение;
			//КонецЕсли;
			

		Иначе
				
			
			НовыйДокумент.Склад 					= ВернутьСклад(СтруктураРеквизитовДокумента, Строка.WarehouseID);
			НовыйДокумент.Партнер 					= ПартнерДляДокумента;
			НовыйДокумент.Менеджер 					= ВернутьМенеджера(СтруктураРеквизитовДокумента, Строка.PersonID);

			НовыйДокумент.Договор 					= ВернутьДоговорПоОрганизацииМенеджеруПартнеру(СтруктураРеквизитовДокумента);
			НовыйДокумент.Контрагент 				= ВернутьКонтрагентаПоДоговору(СтруктураРеквизитовДокумента);
			НовыйДокумент.Соглашение 				= ВернутьСоглашениеПоМенеджеруПартнеру(СтруктураРеквизитовДокумента);
								
			НовыйДокумент.Валюта 					= ВалютаРубль;	
			НовыйДокумент.НалогообложениеНДС 		= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			НовыйДокумент.Подразделение 			= НовыйДокумент.Склад.Подразделение;		
			НовыйДокумент.ЦенаВключаетНДС 			= Истина;			
			НовыйДокумент.ПорядокРасчетов 			= Перечисления.ПорядокРасчетов.ПоНакладным;
			//*- Окончание Заполнение общих реквизитов Возвратов и Заказов
			
			Если ЭтоВозврат Тогда
				
				НовыйДокумент.ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;   
				НовыйДокумент.НомерВходящегоДокумента   = НомерЗаказа;
				НовыйДокумент.ДатаВходящегоДокумента    = Строка.CRMOrderDate;
				НовыйДокумент.ВариантПриемкиТоваров     = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным; //*-Вопрос!!!!
				НовыйДокумент.СпособКомпенсации         = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства;
				
			ИначеЕсли ЭтоЗаказ И НЕ ТипДокументаЗагрузки = "ПеремещениеТоваров" Тогда
				НовыйДокумент.ДатаОтгрузки              = СтруктураРеквизитовДокумента.ДатаОтгрузки + ТекущееВремя;
				НовыйДокумент.Автор 					= ПользовательMonolit;
				НовыйДокумент.НеОтгружатьЧастями 		= Истина;
				НовыйДокумент.БанковскийСчет			= Mon_Общий.ПолучитьБанковскийСчетОрганизацииПоУмолчаниюКастомная(НовыйДокумент.Организация, ВалютаРубль);
				НовыйДокумент.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(НовыйДокумент.Контрагент, ВалютаРубль);
			
				НовыйДокумент.Приоритет 				= ПриоритетСредний;
				НовыйДокумент.НомерПоДаннымКлиента      = НомерЗаказа;
				НовыйДокумент.ДатаПоДаннымКлиента       = Строка.CRMOrderDate;
				НовыйДокумент.ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				
				НовыйДокумент.Грузополучатель 			= ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(НовыйДокумент.Партнер);
			    Если НовыйДокумент.Грузополучатель 		= Справочники.Контрагенты.ПустаяСсылка() Тогда
			      	НовыйДокумент.Грузополучатель 		= НовыйДокумент.Контрагент;
			    КонецЕсли;
				
				НовыйДокумент.Статус 					= Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
				НовыйДокумент.АдресДоставки 			= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(НовыйДокумент.Партнер, Справочники.ВидыКонтактнойИнформации.АдресПартнера);
			    НовыйДокумент.ПорядокОплаты 			= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;

				НовыйДокумент.СпособДоставки 			= Перечисления.СпособыДоставки.ДоКлиента;
				НовыйДокумент.ВернутьМногооборотнуюТару	= Истина;
		      	НовыйДокумент.СрокВозвратаМногооборотнойТары = НовыйДокумент.Соглашение.СрокВозвратаМногооборотнойТары;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НовыйДокумент.Номер = "" Тогда 				
			НовыйДокумент.УстановитьНовыйНомер();
		КонецЕсли;

			
		НовыйДокумент.Товары.Очистить();
		
		ЕстьТара = Ложь;
		
		Для Каждого СтрокаТовары Из Строка.CRMOrderLine Цикл			
			
			НоменклатураМонолит = СтрокаТовары.WareID;
			УпаковкаМонолит		= СтрокаТовары.UnitID;
			
			СтрТовары 				= НовыйДокумент.Товары.Добавить();			
			СтруктураНоменклатуры 	= ВернутьНоменклатуруИзРегистраСопоставления(СтруктураРеквизитовДокумента, НоменклатураМонолит, УпаковкаМонолит);
			
			Если НЕ СтруктураНоменклатуры.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
				
				СтрТовары.Номенклатура 	= СтруктураНоменклатуры.Номенклатура;
				СтрТовары.Упаковка 		= СтруктураНоменклатуры.Упаковка;
				
			Иначе
				
				СтрТовары.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
				СтрТовары.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
				Mon_Сервис.ЗаписатьВМассивОшибок(СтруктураРеквизитовДокумента, "Нет номенклатуры:" + НоменклатураМонолит + ": " + СтрокаТовары.Quantity + " " + УпаковкаМонолит + ", номер строки: " + СтрТовары.НомерСтроки, "Номенклатура", СтрокаТовары.LineNumber);		
				СтруктураРеквизитовДокумента.Комментарий = СтруктураРеквизитовДокумента.Комментарий + "Нет номенклатуры:" + НоменклатураМонолит + ": " + СтрокаТовары.Quantity + " " + УпаковкаМонолит + ", номер строки: " + СтрТовары.НомерСтроки;		
				
			КонецЕсли;	
			
			Если СтруктураНоменклатуры.Упаковка = Фасовка Тогда
				
				СтрТовары.Количество = СтрокаТовары.Quantity * СтруктураНоменклатуры.Коэффициент; 	
				
			ИначеЕсли СтруктураНоменклатуры.Упаковка = Розлив ИЛИ СтруктураНоменклатуры.Упаковка = РозливЛитры Тогда
				
				Если УпаковкаМонолит = "l" Тогда
					СтрТовары.Количество = СтрокаТовары.Quantity;
				Иначе
					СтрТовары.Количество = СтрокаТовары.Quantity * СтруктураНоменклатуры.Коэффициент / 0.033333333;
				КонецЕсли;
				
			КонецЕсли;			
			
			
			
			СтрТовары.КоличествоУпаковок = СтрТовары.Количество;
			
			
			
			Если НЕ ЕстьТара И СтрТовары.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		    	ЕстьТара = Истина;
			КонецЕсли;
			
			Если ТипДокументаЗагрузки = "ПеремещениеТоваров" Тогда
				
				Продолжить;
								
			КонецЕсли;
			
			СтрТовары.СтавкаНДС 		 = СтрТовары.Номенклатура.СтавкаНДС;			
			
			Если ЭтоЗаказ Тогда
				
				СтрТовары.Склад 				= НовыйДокумент.Склад;
				СтрТовары.Отменено 				= Ложь;
				СтрТовары.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
				СтрТовары.ДатаОтгрузки		 	= СтруктураРеквизитовДокумента.ДатаОтгрузки;
			Иначе
				
				СтрТовары.Цена  = СтрокаТовары.Price;
				СтрТовары.Сумма = СтрТовары.Цена * СтрТовары.КоличествоУпаковок;
			КонецЕсли;
				
		КонецЦикла;
		
		НовыйДокумент.Товары.Сортировать("Номенклатура");
		
		Если ЭтоЗаказ И НЕ ТипДокументаЗагрузки = "ПеремещениеТоваров" Тогда
			НовыйДокумент.МаксимальныйКодСтроки = НовыйДокумент.Товары.Количество();
		КонецЕсли;
		
		КомментарийКЗаказу = ПолучитьЗначениеАтрибутаИзЗаказа(СтруктураШлюза, Строка.CRMOrderOption); 
		
		Если НЕ ЭтоВозврат Тогда
			НовыйДокумент.ОсобыеУсловияПеревозки = ЗначениеЗаполнено(КомментарийКЗаказу);
        	НовыйДокумент.ОсобыеУсловияПеревозкиОписание = КомментарийКЗаказу;
		КонецЕсли;
		
		
		НовыйДокумент.Комментарий = КомментарийКЗаказу 	+ " " + СтруктураРеквизитовДокумента.Комментарий;
		

													
														
		Если ЭтоЗаказ И НЕ ТипДокументаЗагрузки = "ПеремещениеТоваров" Тогда
			
			Если НовыйДокумент.Соглашение <> Справочники.СоглашенияСКлиентами.ПустаяСсылка() И НовыйДокумент.Договор <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
		      	НовыйДокумент.ЗаполнитьУсловияПродажПоСоглашению();
			КонецЕсли;
			//РассчитываемСкидки
		    СтруктураПараметры = Новый Структура;
		    СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		    СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		    СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		    СтруктураПараметры.Вставить("УправляемыеСкидки", Новый СписокЗначений);
		    СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(НовыйДокумент, СтруктураПараметры);
			НовыйДокумент.СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.Заполнена;
			ЗаполнениеТарой(НовыйДокумент.Товары);
		ИначеЕсли ЭтоВозврат Тогда
			//НовыйДокумент.ВозвратПереданнойМногооборотнойТары = ЕстьТара;
			НовыйДокумент.ВозвратПереданнойМногооборотнойТары = Истина;
		КонецЕсли;
		
		Если ТипДокументаЗагрузки = "ПеремещениеТоваров" Тогда
			
		   	НоменклатураСервер.ЗаполнитьСерииПоFEFO( НовыйДокумент, Документы.ПеремещениеТоваров.ПараметрыУказанияСерий( НовыйДокумент ) );
		   	//НовыйДокумент.СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.Заполнена;
			//ЗаполнениеТарой(НовыйДокумент.Товары);
		КонецЕсли;
		
		СтруктураРеквизитовДокумента.ЕстьКритическиеОшибки = СтруктураРеквизитовДокумента.ЕстьКритическиеОшибки ИЛИ СтрДлина(СтруктураРеквизитовДокумента.Комментарий) > 0;
		
		НачатьТранзакцию();
		Попытка
			
			НовыйДокумент.Записать(?(СтруктураРеквизитовДокумента.ЕстьКритическиеОшибки, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
			
			Если ТипДокументаЗагрузки = "ПеремещениеТоваров" Тогда
			
				Запись 			= РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				Запись.Объект 	= НовыйДокумент.Ссылка;
				Запись.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "НомерЗаказаМонолитПеремещениеТоваров");
				Запись.Значение = СтруктураРеквизитовДокумента.НомерЗаказа;
				Запись.Записать(Истина);
				
				Запись 			= РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
				Запись.Объект	= НовыйДокумент.Ссылка;
				Запись.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ДатаЗаказаМонолитПеремещениеТоваров");
				Запись.Значение = СтруктураРеквизитовДокумента.ДатаЗаказа;
				Запись.Записать(Истина);
				
			КонецЕсли;
		
			ВозниклаОшибка = Ложь;

		Исключение
			а = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации( "ЗагрузкаМонолитОшибка", УровеньЖурналаРегистрации.Ошибка,
				,"", а);
			ОтменитьТранзакцию();
			ВозниклаОшибка = Истина;
			СтруктураРеквизитовДокумента.ЕстьКритическиеОшибки = Истина;
		КонецПопытки;
		
		Если ВозниклаОшибка Тогда
			НачатьТранзакцию();
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
			Запись 			= РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			Запись.Объект 	= НовыйДокумент.Ссылка;
			Запись.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "НомерЗаказаМонолитПеремещениеТоваров");
			Запись.Значение = СтруктураРеквизитовДокумента.НомерЗаказа;
			Запись.Записать(Истина);
			
			Запись 			= РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
			Запись.Объект	= НовыйДокумент.Ссылка;
			Запись.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ДатаЗаказаМонолитПеремещениеТоваров");
			Запись.Значение = СтруктураРеквизитовДокумента.ДатаЗаказа;
			Запись.Записать(Истина);
			
		КонецЕсли;
		
		
		
		ФлагВБазеБольшеОдногоДокументаСРеквизитамиБалтики = ПроверитьДокументыСРеквизитамиБалтики(НовыйДокумент.Ссылка, СтруктураРеквизитовДокумента);
		
		Если ФлагВБазеБольшеОдногоДокументаСРеквизитамиБалтики Тогда
			
			ОтменитьТранзакцию();
			Продолжить;
			
		Иначе
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
				
		СтруктураРеквизитовДокумента.СсылкаНаДокумент = НовыйДокумент.Ссылка;
		
		//Mon_Сервис.ЗаписатьВЛогМассивОшибок(СтруктураРеквизитовДокумента);
		
		Если ЭтоЗаказ И НЕ ТипДокументаЗагрузки = "ПеремещениеТоваров" И НЕ СтруктураРеквизитовДокумента.ЕстьКритическиеОшибки Тогда
			
			РеализацияСсылка = ВернутьРеализациюТоваровИУслуг(НовыйДокумент.Ссылка);
			
			Если РеализацияСсылка = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда 
			
		 		ДокОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			Иначе
				ДокОбъект = РеализацияСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			ДокОбъект.ПометкаУдаления = Ложь;
			ДокОбъект.Товары.Очистить();
			
			ДокОбъект.Заполнить(НовыйДокумент.Ссылка);
			
			Попытка
				НоменклатураСервер.ЗаполнитьСерииПоFEFO( ДокОбъект, Документы.РеализацияТоваровУслуг.ПараметрыУказанияСерий( ДокОбъект ) );
			Исключение
				
				СтруктураРеквизитовДокумента.ЕстьКритическиеОшибки = Истина;
				а = ОписаниеОшибки();
				ДокОбъект.Комментарий = ДокОбъект.Комментарий + ". Не удалось заполнить серии по FEFO";
				
			КонецПопытки;
			ДокОбъект.СкидкиРассчитаны = Истина;
			ДокОбъект.Менеджер = НовыйДокумент.Менеджер;
			ДокОбъект.Дата = СтруктураРеквизитовДокумента.ДатаОтгрузки + ТекущееВремя;
			ДокОбъект.ЗаполнитьЭтапыГрафикаОплаты();
			
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				
				Если ЭтоЗаказ = Истина Тогда
					ДокОбъект.Серии.Очистить();
				    Для каждого Строка Из ДокОбъект.Товары Цикл
				       	Если Строка.СтатусУказанияСерий = 0 Тогда
				    		Продолжить;
				    	Иначе
				          	Строка.СтатусУказанияСерий = 5;  
				        КонецЕсли;      
					КонецЦикла;
				КонецЕсли;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
				НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры



#Область ВспомогательныеПроцедуры
Функция ВернутьНоменклатуруИзРегистраСопоставления(СтруктураРеквизитовДокумента, НоменклатураМонолит, УпаковкаМонолит)
	
	ЗапросНоменклатуры 	= Новый Запрос;
	СтруктураОтвета 	= Новый Структура;
	
	СтруктураОтвета.Вставить("Номенклатура", 	Справочники.Номенклатура.ПустаяСсылка());
	СтруктураОтвета.Вставить("Упаковка", 		Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	СтруктураОтвета.Вставить("Коэффициент", 	1);
					
	ЗапросНоменклатуры.Текст = Mon_Общий.ВернутьТекстЗапросаНаПолучениеНоменклатуры();
	
	ЗапросНоменклатуры.УстановитьПараметр("НоменклатураМонолит", 	НоменклатураМонолит);
	ЗапросНоменклатуры.УстановитьПараметр("УпаковкаМонолит", 		УпаковкаМонолит);
	ЗапросНоменклатуры.УстановитьПараметр("ТипМонолита", 			СтруктураРеквизитовДокумента.ШлюзОрганизации.ТипМонолита);
	
	Результат = ЗапросНоменклатуры.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ВыборкаНоменклатуры = Результат.Выбрать();	
	ВыборкаНоменклатуры.Следующий();
	ЗаполнитьЗначенияСвойств(СтруктураОтвета, ВыборкаНоменклатуры);
			
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ВернутьПартнера(СтруктураРеквизитовДокумента, CRMClientId)

	Запрос			 	= Новый Запрос;
	
	Партнер = Справочники.Партнеры.ПустаяСсылка();
	ГоловнойПартнер = Справочники.Партнеры.ПустаяСсылка();

	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаПолучениеПартнера();
	
	Запрос.УстановитьПараметр("КодТорговойТочки",		CRMClientId);
	Запрос.УстановитьПараметр("ТипМонолита", 			СтруктураРеквизитовДокумента.ШлюзОрганизации.ТипМонолита);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		СтруктураРеквизитовДокумента.Комментарий = СтруктураРеквизитовДокумента.Комментарий + "Нет ТТ:" + CRMClientId;
		Mon_Сервис.ЗаписатьВМассивОшибок(СтруктураРеквизитовДокумента, "Нет ТТ:" + CRMClientId, "Торговая точка");
		
		Возврат Партнер;
	КонецЕсли;
	
	ВыборкаПартнеров = Результат.Выбрать();	
	ВыборкаПартнеров.Следующий();
	
	Партнер = ВыборкаПартнеров.Партнер;
	ГоловнойПартнер = ВыборкаПартнеров.ГоловнойПартнер;
	
	СтруктураРеквизитовДокумента.Партнер = Партнер;
	СтруктураРеквизитовДокумента.ГоловнойПартнер = ГоловнойПартнер;	
	Возврат Партнер;
	
	
КонецФункции

Функция ВернутьКонтрагентаПоПартнеру(СтруктураРеквизитовДокумента)

	Запрос			 	= Новый Запрос;
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	ГоловнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаПолучениеКонтрагента();
	
	Запрос.УстановитьПараметр("Партнер", ?(ЗначениеЗаполнено(СтруктураРеквизитовДокумента.ГоловнойПартнер), СтруктураРеквизитовДокумента.ГоловнойПартнер, СтруктураРеквизитовДокумента.Партнер));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ГоловнойКонтрагент;
	КонецЕсли;
	
	ВыборкаКонтрагентов = Результат.Выбрать();	
	ВыборкаКонтрагентов.Следующий();
	
	Контрагент = ВыборкаКонтрагентов.Контрагент;
	ГоловнойКонтрагент = ВыборкаКонтрагентов.ГоловнойКонтрагент;
	
	СтруктураРеквизитовДокумента.Контрагент = Контрагент;
	СтруктураРеквизитовДокумента.ГоловнойКонтрагент = ГоловнойКонтрагент;	
	Возврат ГоловнойКонтрагент;
	
	
КонецФункции

Функция ВернутьКонтрагентаПоДоговору(СтруктураРеквизитовДокумента)

	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	ГоловнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();

	
	Если ЗначениеЗаполнено(СтруктураРеквизитовДокумента.Договор) Тогда
		
		Контрагент 			= СтруктураРеквизитовДокумента.Договор.Контрагент;
		ГоловнойКонтрагент 	= Контрагент.ГоловнойКонтрагент;
	
	КонецЕсли;
	
	СтруктураРеквизитовДокумента.Контрагент 		= Контрагент;
	СтруктураРеквизитовДокумента.ГоловнойКонтрагент = ГоловнойКонтрагент;
	
	
	Если ЗначениеЗаполнено(Контрагент.ГоловнойКонтрагент) Тогда
		//@skip-warning
		Контрагент = Контрагент.ГоловнойКонтрагент;	
	КонецЕсли;
	
	Возврат Контрагент;
	
	
КонецФункции

Функция ВернутьМенеджера(СтруктураРеквизитовДокумента, PersonID)
	
	ТорговыеПредставители = СтруктураРеквизитовДокумента.ШлюзОрганизации.ТорговыеПредставители;
	СтрокаТорговогоПредставителя = ТорговыеПредставители.Найти(PersonID, "КодТорговогоПредставителя");
	
	Если СтрокаТорговогоПредставителя = Неопределено Тогда
		СтруктураРеквизитовДокумента.Комментарий = СтруктураРеквизитовДокумента.Комментарий + "Нет менеджера:" + PersonID;
		Менеджер = Справочники.Пользователи.ПустаяСсылка();
		Mon_Сервис.ЗаписатьВМассивОшибок(СтруктураРеквизитовДокумента, "Нет менеджера:" + PersonID, "Менеджер");
	Иначе 
		Менеджер = СтрокаТорговогоПредставителя.ТорговыйПредставитель;		
	КонецЕсли;
	
	СтруктураРеквизитовДокумента.Менеджер = Менеджер;
	
	Возврат Менеджер;
	
КонецФункции

Функция ВернутьДоговорПоОрганизацииМенеджеруПартнеру(СтруктураРеквизитовДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаПолучениеДоговора();
	Запрос.УстановитьПараметр("Организация", 	СтруктураРеквизитовДокумента.Организация);
	Запрос.УстановитьПараметр("Менеджер", 		СтруктураРеквизитовДокумента.Менеджер);
	Запрос.УстановитьПараметр("Партнер",  		СтруктураРеквизитовДокумента.Партнер);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Mon_Сервис.ЗаписатьВМассивОшибок(СтруктураРеквизитовДокумента, "Нет договора", "Договор");
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	Результат = Выборка.Договор;
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовДокумента, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьСоглашениеПоМенеджеруПартнеру(СтруктураРеквизитовДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаПолучениеСоглашения();
	
	

	Запрос.УстановитьПараметр("Менеджер", 	СтруктураРеквизитовДокумента.Менеджер);
	Запрос.УстановитьПараметр("Партнер",  	СтруктураРеквизитовДокумента.Партнер);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Mon_Сервис.ЗаписатьВМассивОшибок(СтруктураРеквизитовДокумента, "Нет соглашения", "Соглашение");
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	Выборка.Следующий();
	Результат = Выборка.Соглашение;
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитовДокумента, Выборка);
	
	Возврат Результат;

КонецФункции

Функция ЗагруженДокумент(СтруктураШлюза, НомерДокумента, ДатаДокумента, DocumentTypeId)
	
	ЗапросЗаказов = Новый Запрос;
	
	ЗапросЗаказов.Текст = 
		"ВЫБРАТЬ
		|	ДокЗагрузки.Ссылка КАК Документ,
		|	ВЫБОР
		|		КОГДА ДокЗагрузки.ПометкаУдаления
		|			ТОГДА ""УДАЛЕН""
		|		КОГДА ДокЗагрузки.Проведен
		|			ТОГДА ""ПРОВЕДЕН""
		|		ИНАЧЕ ""КЗАГРУЗКЕ""
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДокЗагрузки
		|ГДЕ
		|	ДокЗагрузки.НомерПоДаннымКлиента = &НЗ
		|	И ДокЗагрузки.ДатаПоДаннымКлиента = &ДЗ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Документ,
		|	ВЫБОР
		|		КОГДА ДополнительныеСведения.Объект.ПометкаУдаления
		|			ТОГДА ""УДАЛЕН""
		|		КОГДА ДополнительныеСведения.Объект.Проведен
		|			ТОГДА ""ПРОВЕДЕН""
		|		ИНАЧЕ ""КЗАГРУЗКЕ""
		|	КОНЕЦ КАК Статус
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|	Внутреннее соединение Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		| 	ПО  ДополнительныеСведения.Объект = ПеремещениеТоваров.Ссылка
		|ГДЕ
		|	ДополнительныеСведения.Свойство.Имя = ""НомерЗаказаМонолитПеремещениеТоваров""
		|	И ДополнительныеСведения.Значение = &НЗ
		|";
	Если DocumentTypeId = "CustReturn" Тогда
		ЗапросЗаказов.Текст = СтрЗаменить(ЗапросЗаказов.Текст, ".ЗаказКлиента", ".ВозвратТоваровОтКлиента");
		ЗапросЗаказов.Текст = СтрЗаменить(ЗапросЗаказов.Текст, ".НомерПоДаннымКлиента", ".НомерВходящегоДокумента");
		ЗапросЗаказов.Текст = СтрЗаменить(ЗапросЗаказов.Текст, ".ДатаПоДаннымКлиента", ".ДатаВходящегоДокумента");
		
	КонецЕсли;
		
	ЗапросЗаказов.УстановитьПараметр("ДЗ", ДатаДокумента);	
	ЗапросЗаказов.УстановитьПараметр("НЗ", НомерДокумента);
	
	РезультатЗапроса = ЗапросЗаказов.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Если DocumentTypeId = "CustReturn" Тогда
			НовыйДокумент = Документы.ВозвратТоваровОтКлиента.ПустаяСсылка();	
		Иначе
			НовыйДокумент = Документы.ЗаказКлиента.ПустаяСсылка();
		КонецЕсли;
		
		Возврат НовыйДокумент;

	КонецЕсли;
	
	ВыборкаЗаказов = РезультатЗапроса.Выбрать();	
	
	ВыборкаЗаказов.Следующий();
	
	НовыйДокумент = ВыборкаЗаказов.Документ;
	
	Если НЕ ВыборкаЗаказов.Статус = "КЗАГРУЗКЕ" Тогда 
		
		Возврат Неопределено;
		
	Иначе
		
		Если DocumentTypeId = "CustReturn" Тогда
			Возврат Неопределено;
		Иначе
			Возврат НовыйДокумент;
		КонецЕсли;
		
		//Возврат НовыйДокумент;
		
	КонецЕсли;		
		
КонецФункции

Функция ВернутьОрганизацию(СтруктураРеквизитовДокумента, СтруктураШлюза, CRMOrderOption, СоответствиеБонусныхСкладов)
	
	//*-Если склад бонусный, то организация точно Ф2
	
	Если СоответствиеБонусныхСкладов.Получить(СтруктураРеквизитовДокумента.Склад) = Истина Тогда
		
		СтруктураРеквизитовДокумента.Организация 				= СтруктураШлюза.ШлюзОрганизации.ОрганизацияФ2;
		
		Возврат СтруктураРеквизитовДокумента.Организация;	
		
	КонецЕсли;
	
	//*-
	
	Если НЕ ПолучитьЗначениеАтрибутаИзЗаказа(СтруктураШлюза, CRMOrderOption, "АтрибутПроводная" ) = "1" Тогда
		 СтруктураРеквизитовДокумента.Организация 				= СтруктураШлюза.ШлюзОрганизации.Организация;
	Иначе
		 СтруктураРеквизитовДокумента.Организация 				= СтруктураШлюза.ШлюзОрганизации.ОрганизацияФ2;
	КонецЕсли;
	
	Возврат СтруктураРеквизитовДокумента.Организация;
		
КонецФункции

Функция ВернутьСклад(СтруктураРеквизитовДокумента, WarehouseID)

	Склады = СтруктураРеквизитовДокумента.ШлюзОрганизации.Склады;
	СтрокаСклада = Склады.Найти(WarehouseID, "КодСклада");
	
	Если СтрокаСклада = Неопределено Тогда
		Склад = Справочники.Склады.ПустаяСсылка();
		СтруктураРеквизитовДокумента.Комментарий = СтруктураРеквизитовДокумента.Комментарий + "Нет склада:" + WarehouseID;
		Mon_Сервис.ЗаписатьВМассивОшибок(СтруктураРеквизитовДокумента, "Нет склада:" + WarehouseID, "Склад");
	иначе
		Склад = СтрокаСклада.Склад;		
	КонецЕсли;
	
	СтруктураРеквизитовДокумента.Склад = Склад;
	
	Возврат Склад;
	
КонецФункции

Функция ВернутьРозничныйСклад(СтруктураРеквизитовДокумента, Партнер)

	Склады = СтруктураРеквизитовДокумента.ШлюзОрганизации.Склады;
	СтрокаСклада = Склады.Найти(Партнер, "ПартнерДляРозницы");
	
	Если СтрокаСклада = Неопределено Тогда
		Склад = Справочники.Склады.ПустаяСсылка();
	иначе
		Склад = СтрокаСклада.Склад;		
	КонецЕсли;
	
	СтруктураРеквизитовДокумента.РозничныйСклад = Склад;
	
	Возврат Склад;
	
КонецФункции

Функция ВернутьРеализациюТоваровИУслуг(ЗаказКлиента)
	
	ЗапросЗаказов = Новый Запрос;
	
	ЗапросЗаказов.Текст = 
		"ВЫБРАТЬ
        |	ДокЗагрузки.Ссылка КАК Документ,
		|	ВЫБОР КОГДА ДокЗагрузки.ПометкаУдаления Тогда ""УДАЛЕН""
		|	КОГДА Докзагрузки.Проведен Тогда ""ПРОВЕДЕН"" 
		|	ИНАЧЕ ""КЗАГРУЗКЕ"" КОНЕЦ КАК Статус
        |ИЗ
        |	Документ.РеализацияТоваровУслуг КАК ДокЗагрузки
        |ГДЕ
        |	ДокЗагрузки.ЗаказКлиента = &ЗаказКлиента";

		
	ЗапросЗаказов.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);	
	
	РезультатЗапроса = ЗапросЗаказов.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		НовыйДокумент = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		
		Возврат НовыйДокумент;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();	
	
	Выборка.Следующий();
	
	НовыйДокумент = Выборка.Документ;
	
	Возврат НовыйДокумент;	
		
КонецФункции

Функция	ПолучитьЗначениеАтрибутаИзЗаказа(СтруктураШлюза, CRMOrderOption, СсылкаНаАтрибут = "Comment")
	
	Результат = "";
	Если НЕ СсылкаНаАтрибут = "Comment" Тогда
		НазваниеАтрибута = СтруктураШлюза.ШлюзОрганизации.ТипМонолита[СсылкаНаАтрибут];
	Иначе
		НазваниеАтрибута = СсылкаНаАтрибут;
	КонецЕсли;
	
	
	Если НазваниеАтрибута = "" Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Если CRMOrderOption.Количество() = 0 Тогда 
		Возврат Результат;
	КонецЕсли;
	ИндексНайденнойСтроки = 0;
	
	Пока ИндексНайденнойСтроки <= CRMOrderOption.Вграница() Цикл
		
		Если CRMOrderOption[ИндексНайденнойСтроки].OptionTypeId = НазваниеАтрибута Тогда 
			Результат = CRMOrderOption[ИндексНайденнойСтроки].Value;	
			Возврат Результат;
		КонецЕсли;
		ИндексНайденнойСтроки = ИндексНайденнойСтроки + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьСоответствиеБонусныхСкладов()
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|  ДополнительныеСведения.Объект КАК Объект
		|ИЗ
		|  РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|  ДополнительныеСведения.Свойство.Имя = ""Бонусный_a9b08a37d0024727a9536c21c2fcce3e""
		|  И ДополнительныеСведения.Значение = ИСТИНА
		|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Вставить(Выборка.Объект, Истина);
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьДокументыСРеквизитамиБалтики(Ссылка, СтруктураРеквизитовДокумента) Экспорт
	
	ЭтоВозврат = ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
	
	ЗапросЗаказов = Новый Запрос;
	
	ЗапросЗаказов.Текст = "ВЫБРАТЬ
		|	ДокЗагрузки.Ссылка КАК Документ
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДокЗагрузки
		|ГДЕ
		|	ДокЗагрузки.НомерПоДаннымКлиента = &НЗ
		|	И ДокЗагрузки.ДатаПоДаннымКлиента = &ДЗ
		|	И НЕ ДокЗагрузки.Ссылка = &Ссылка
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Документ
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|	Внутреннее соединение Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		| 	ПО  ДополнительныеСведения.Объект = ПеремещениеТоваров.Ссылка
		|ГДЕ
		|	ДополнительныеСведения.Свойство.Имя = ""НомерЗаказаМонолитПеремещениеТоваров""
		|	И ДополнительныеСведения.Значение = &НЗ
		|	И НЕ ДополнительныеСведения.Объект = &Ссылка
		|";
		
	Если ЭтоВозврат Тогда
		
		ЗапросЗаказов.Текст = СтрЗаменить(ЗапросЗаказов.Текст, ".ЗаказКлиента", 		".ВозвратТоваровОтКлиента");
		ЗапросЗаказов.Текст = СтрЗаменить(ЗапросЗаказов.Текст, ".НомерПоДаннымКлиента", ".НомерВходящегоДокумента");
		ЗапросЗаказов.Текст = СтрЗаменить(ЗапросЗаказов.Текст, ".ДатаПоДаннымКлиента", 	".ДатаВходящегоДокумента");
		
	КонецЕсли;
	
	ЗапросЗаказов.УстановитьПараметр("НЗ", СтруктураРеквизитовДокумента.НомерЗаказа);	
	ЗапросЗаказов.УстановитьПараметр("ДЗ", СтруктураРеквизитовДокумента.ДатаЗаказа);
		
	
	
	ЗапросЗаказов.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = ЗапросЗаказов.Выполнить();
				
	Возврат НЕ РезультатЗапроса.Пустой();
		
КонецФункции

#КонецОбласти

#Область ЗагрузкаПКО
Процедура ЗагрузитьИзРегистраПКОМонолит() Экспорт
	
	Параметры 			 	= Новый Массив;
	МассивСтруктурШлюзов 	= Новый Массив;
	Запрос 					= Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаАктуальныеШлюзы();
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоШлюзовВПакете = 7;
	
	НомерШлюза = 1;
		
	ОбщееКоличествоШлюзов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл	
	
		СтруктурыШлюзов = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		ЗаполнитьЗначенияСвойств(СтруктурыШлюзов, Выборка);
		СтруктурыШлюзов.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMCreditCashOrder;
		
		МассивСтруктурШлюзов.Добавить(СтруктурыШлюзов);
		
		Если (НомерШлюза <> 1 И НомерШлюза % КоличествоШлюзовВПакете = 0) ИЛИ НомерШлюза = ОбщееКоличествоШлюзов Тогда			
			
			Параметры.Добавить(МассивСтруктурШлюзов);
			
			//Собранные пакеты шлюзов
			 ВыполнитьЧтениеРегистраФоном(МассивСтруктурШлюзов);
			
			//ФоновыеЗадания.Выполнить("Mon_ЧтениеРегистра.ВыполнитьЧтениеРегистраФоном", 
			//	Параметры, Новый УникальныйИдентификатор, "Фоновое выполнение СRMMonolit");	
				
			Параметры.Очистить();
				
		КонецЕсли;
		
		НомерШлюза = НомерШлюза + 1;					
		
	КонецЦикла;
		
	
КонецПроцедуры

Процедура ЗагрузитьПКОПоСпискуДокументов(СтруктураШлюза, СоответствиеДанныхXML)
	
	
	ВнешнийКодПКОРеквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию( "Внешний код (Документ ""Приходный кассовый ордер"")", Истина );	
	
	ЧерныйФлаг = "УК";
	
	
	
	
	ТЗДокументов = Новый ТаблицаЗначений;
	
	ТЗДокументов.Колонки.Добавить( "CRMClientId", 		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 55 ) );
	ТЗДокументов.Колонки.Добавить( "ActionDate", 		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30 ) ); 
	ТЗДокументов.Колонки.Добавить( "PersonId", 			Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30 ) ); 
	ТЗДокументов.Колонки.Добавить( "CRMOrderNumber",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30 ) );
	ТЗДокументов.Колонки.Добавить( "Summa", 			Mon_Общий.УстановитьТипДанных( Тип("Число") ) );
	ТЗДокументов.Колонки.Добавить( "DespatchNumber",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30 ) );

	ТЗДопСведений = Новый ТаблицаЗначений;
	 
	ТЗДопСведений.Колонки.Добавить( "CRMOrderNumber",	Mon_Общий.УстановитьТипДанных( Тип("Строка"), 30 ) );
	ТЗДопСведений.Колонки.Добавить( "Comment",			Mon_Общий.УстановитьТипДанных( Тип("Строка"), 100 ) );	
	ТЗДопСведений.Колонки.Добавить( "CommentUp",		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 100 ) );
	
	СписокДокументов = СоответствиеДанныхXML["CRMCreditCashOrder"];
	
	Для Каждого Док из СписокДокументов Цикл
		
		НоваяСтрока = ТЗДокументов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Док);
		НоваяСтрока.DespatchNumber = ВРег(Док.DespatchNumber);
		
	КонецЦикла;
	
	СписокПримечаний = СоответствиеДанныхXML["CRMCreditCashOrderOption"];
	
	Для Каждого Док из СписокПримечаний Цикл
		
		Если Док.OptionTypeId = "Comment" Тогда
			
			НоваяСтрока = ТЗДопСведений.Добавить();
		
			НоваяСтрока.CRMOrderNumber 	= Док.CRMOrderNumber;
		    НоваяСтрока.Comment 		= Док.Value;
			НоваяСтрока.CommentUp 		= ВРег(Док.Value);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТЗ.CRMClientId КАК CRMClientId,
		|	ТЗ.ActionDate КАК ActionDate,
		|	ТЗ.PersonId КАК PersonId,
		|	ТЗ.Summa КАК Summa,
		|	ТЗ.CRMOrderNumber КАК CRMOrderNumber,
		|	ТЗ.DespatchNumber КАК DespatchNumber
		|ПОМЕСТИТЬ ВТ_ТЗ
		|ИЗ
		|	&ТЗДокументов КАК ТЗ
		|;
		|
		|ВЫБРАТЬ
		|	ТЗ.CRMOrderNumber КАК CRMOrderNumber,
		|	ТЗ.Comment КАК Comment,
		|	ТЗ.CommentUP КАК CommentUP,
		|	ТЗ.CommentUP ПОДОБНО ""%"" + &ЧерныйФлаг + ""%"" КАК ФлагРаспределения
		|ПОМЕСТИТЬ ВТ_ТЗКомменты
		|ИЗ
		|	&ТЗКомменты КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДополнительныеСведения.Объект) КАК Партнер,
		|	ДополнительныеСведения.Значение КАК КодТорговойТочки
		|ПОМЕСТИТЬ ВТ_СоответствияТорговыхТочек
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Партнеры
		|	И ДополнительныеСведения.Свойство.Имя = ""КодМонолитБалтикаПартнеры""
		|
		|СГРУППИРОВАТЬ ПО
		|	ДополнительныеСведения.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДополнительныеСведения.Объект) КАК ПКО,
		|	ДополнительныеСведения.Значение КАК ВнешнийКодПКО		
		|ПОМЕСТИТЬ ВТ_ВнешниеКодыПКО
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект ССЫЛКА Документ.ПриходныйКассовыйОрдер
		|	И ДополнительныеСведения.Свойство = &ВнешнийКодПКОРеквизит
		|
		|СГРУППИРОВАТЬ ПО
		|	ДополнительныеСведения.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(Mon_ШлюзыОрганизацииТорговыеПредставители.ТорговыйПредставитель) КАК ТорговыйПредставитель,
		|	МАКСИМУМ(ВЫБОР КОГДА ЕстьNULL(ВТ_ТЗКомменты.ФлагРаспределения, ЛОЖЬ) Тогда Mon_ШлюзыОрганизацииТорговыеПредставители.Ссылка.ОрганизацияФ2 ИНАЧЕ Mon_ШлюзыОрганизацииТорговыеПредставители.Ссылка.Организация КОНЕЦ) КАК Организация,
		|	ВТ_ТЗ.PersonId КАК PersonId,
		|	МАКСИМУМ(ВЫБОР КОГДА ЕстьNULL(ВТ_ТЗКомменты.ФлагРаспределения, ЛОЖЬ) Тогда КассыФ2.Ссылка ИНАЧЕ Кассы.Ссылка КОНЕЦ) КАК Касса
		|ПОМЕСТИТЬ ВТ_Торговые
		|ИЗ
		|	Справочник.Mon_ШлюзыОрганизации.ТорговыеПредставители КАК Mon_ШлюзыОрганизацииТорговыеПредставители
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТЗ КАК ВТ_ТЗ
		|		ПО (ВТ_ТЗ.PersonId = Mon_ШлюзыОрганизацииТорговыеПредставители.КодТорговогоПредставителя)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
		|		ПО Mon_ШлюзыОрганизацииТорговыеПредставители.Ссылка.Организация = Кассы.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы КАК КассыФ2
		|		ПО Mon_ШлюзыОрганизацииТорговыеПредставители.Ссылка.ОрганизацияФ2 = Кассы.Владелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТЗКомменты КАК ВТ_ТЗКомменты
		|		ПО ВТ_ТЗ.CRMOrderNumber = ВТ_ТЗКомменты.CRMOrderNumber
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТЗ.PersonId,
		|	Кассы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЗ.CRMClientId КАК CRMClientId,
		|	ВТ_ТЗ.ActionDate КАК ActionDate,
		|	ВТ_ТЗ.PersonId КАК PersonId,
		|	ВТ_ТЗ.Summa КАК Summa,
		|	ВТ_ТЗ.CRMOrderNumber КАК CRMOrderNumber,
		|	ВТ_ТЗ.DespatchNumber КАК DespatchNumber,
		|	ЕСТЬNULL(ВТ_ВнешниеКодыПКО.ПКО, Значение(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка)) КАК ПКО,
		|	ВТ_СоответствияТорговыхТочек.Партнер КАК Партнер,
		|	ЕСТЬNULL(ВТ_СоответствияТорговыхТочек.Партнер, ""Нет контрагента"") КАК КомментарийКонтрАгент,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента) КАК СтатьяДвиженияДенежныхСредств,
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20) КАК СтавкаНДС,
		|	Валюты.Ссылка КАК ВалютаВзаиморасчетов,
		|	ВТ_Торговые.ТорговыйПредставитель КАК ТорговыйПредставитель,
		|	ВТ_Торговые.Организация КАК Организация,
		|	ВТ_Торговые.Касса КАК Касса
		|
		|ПОМЕСТИТЬ ВТ_ПодготовленныеПКО
		|ИЗ
		|	ВТ_ТЗ КАК ВТ_ТЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВнешниеКодыПКО КАК ВТ_ВнешниеКодыПКО
		|		ПО (ВТ_ВнешниеКодыПКО.ВнешнийКодПКО = ВТ_ТЗ.CRMOrderNumber)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоответствияТорговыхТочек КАК ВТ_СоответствияТорговыхТочек
		|		ПО ВТ_ТЗ.CRMClientId = ВТ_СоответствияТорговыхТочек.КодТорговойТочки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Торговые КАК ВТ_Торговые
		|		ПО ВТ_ТЗ.PersonId = ВТ_Торговые.PersonId
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
		|		ПО (Валюты.Код = ""643"")
		|
		|;
		|
		|	////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ
		|		ВТ_ПодготовленныеПКО.CRMOrderNumber КАК ВнешнийКодПКО,
		|		ВТ_ПодготовленныеПКО.CRMClientId КАК CRMClientId,
		|		ВТ_ПодготовленныеПКО.ActionDate КАК Дата,
		|		ВТ_ПодготовленныеПКО.PersonId КАК PersonId,
		|		ВТ_ПодготовленныеПКО.Summa КАК Сумма,
		|		ВТ_ПодготовленныеПКО.Summa КАК СуммаДокумента,
		|		ВТ_ПодготовленныеПКО.DespatchNumber КАК НомерРасходной,
		|		ВТ_ПодготовленныеПКО.ПКО КАК ПКО,
		|		ВТ_ПодготовленныеПКО.Партнер КАК Партнер,
		|		ВТ_ПодготовленныеПКО.Партнер.Наименование КАК ПринятоОт,
		|		ВТ_ПодготовленныеПКО.КомментарийКонтрАгент КАК КомментарийКонтрАгент,
		|		ВТ_ПодготовленныеПКО.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		ВТ_ПодготовленныеПКО.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|		ВТ_ПодготовленныеПКО.СтавкаНДС КАК СтавкаНДС,
		|		ВТ_ПодготовленныеПКО.ВалютаВзаиморасчетов КАК Валюта,
		|		ВТ_ПодготовленныеПКО.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|		ВТ_ПодготовленныеПКО.Организация КАК Организация,
		|		ВТ_ПодготовленныеПКО.Касса КАК Касса,
		|		ВТ_ПодготовленныеПКО.ТорговыйПредставитель КАК ТорговыйПредставитель,
		|		ВТ_ПодготовленныеПКО.ТорговыйПредставитель КАК Кассир,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) КАК НалогообложениеНДС,
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ДокументОснование,
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОснованиеПлатежа,
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов.Контрагент КАК Контрагент,
		|		РасчетыСКлиентамиПоСрокам.ДолгОстаток КАК Долг,
		|		РасчетыСКлиентамиПоСрокам.ПредоплатаОстаток КАК Предоплата
		|	ИЗ
		|		ВТ_ПодготовленныеПКО КАК ВТ_ПодготовленныеПКО
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ДатаЗапроса, ) КАК РасчетыСКлиентамиПоСрокам
		|			ПО (ВТ_ПодготовленныеПКО.Партнер = РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Партнер)
		|			И РасчетыСКлиентамиПоСрокам.ДолгОстаток > 0
		|				И (ВТ_ПодготовленныеПКО.ТорговыйПредставитель = РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Договор.Менеджер)
		|
		|	УПОРЯДОЧИТЬ ПО
		|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов.Дата
		|	ИТОГИ
		|		МАКСИМУМ(Дата),
		|		МАКСИМУМ(PersonId),
		|		МАКСИМУМ(Сумма),
		|		МАКСИМУМ(СуммаДокумента),
		|		МАКСИМУМ(НомерРасходной),
		|		МАКСИМУМ(ПКО),
		|		МАКСИМУМ(Партнер),
		|		МАКСИМУМ(КомментарийКонтрАгент),
		|		МАКСИМУМ(ХозяйственнаяОперация),
		|		МАКСИМУМ(СтатьяДвиженияДенежныхСредств),
		|		МАКСИМУМ(СтавкаНДС),
		|		МАКСИМУМ(Валюта),
		|		МАКСИМУМ(ВалютаВзаиморасчетов),
		|		МАКСИМУМ(Организация),
		|		МАКСИМУМ(Касса),
		|		МАКСИМУМ(НалогообложениеНДС),
		|		МАКСИМУМ(ОснованиеПлатежа),
		|		МАКСИМУМ(Контрагент),
		|		МАКСИМУМ(ТорговыйПредставитель),
		|		МАКСИМУМ(Кассир),
		|		МАКСИМУМ(CRMClientId)
		|	ПО
		|		ВнешнийКодПКО
		|";
	
	
	Запрос.УстановитьПараметр("ТЗДокументов", 			ТЗДокументов);

	Запрос.УстановитьПараметр("ТЗКомменты", 			ТЗДопСведений);

	Запрос.УстановитьПараметр("ВнешнийКодПКОРеквизит", 	ВнешнийКодПКОРеквизит);
	Запрос.УстановитьПараметр("ЧерныйФлаг", 			ЧерныйФлаг);
	Запрос.УстановитьПараметр("ДатаЗапроса", 			ТекущаяДата());	
	Результат = Запрос.Выполнить();
	
	ВыборкаПКО = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПКО.Следующий() Цикл
						
		Если ВыборкаПКО.ПКО.Пустая() Тогда
			
			ОбъектПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент(); 
						
		ИначеЕсли НЕ ВыборкаПКО.ПКО.Проведен И НЕ ВыборкаПКО.ПКО.ПометкаУдаления Тогда 
			
			ОбъектПКО = ВыборкаПКО.ПКО.ПолучитьОбъект();
						
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		ЕстьКритическиеОшибки = Ложь;
		
		ЗаполнитьЗначенияСвойств(ОбъектПКО, ВыборкаПКО);
		
		ОбъектПКО.Дата = ОбъектПКО.Дата + (ТекущаяДата() - НачалоДня(ТекущаяДата())); 
		
		ОбъектПКО.ПринятоОт = ОбъектПКО.Контрагент.Наименование;
		
		ОбъектПКО.РасшифровкаПлатежа.Очистить();
		
		Выборка = ВыборкаПКО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ОбщаяСуммаДокумента = ВыборкаПКО.СуммаДокумента;
		
		Пока Выборка.Следующий() И ОбщаяСуммаДокумента > 0 Цикл
			
			СуммаДляРаспределения = Мин(Выборка.ДокументОснование.СуммаДокумента, ОбщаяСуммаДокумента);
			
			СтрокаРасшифровки = ОбъектПКО.РасшифровкаПлатежа.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Выборка);
			
			СтрокаРасшифровки.Сумма = СуммаДляРаспределения;
			
			СтрокаРасшифровки.Заказ 	= СтрокаРасшифровки.ОснованиеПлатежа;
			СтрокаРасшифровки.СуммаНДС 	= РасчетСуммыНДС( СтрокаРасшифровки.Сумма, СтрокаРасшифровки.СтавкаНДС );
			
			ОбщаяСуммаДокумента = ОбщаяСуммаДокумента - СуммаДляРаспределения;
			
		КонецЦикла;
		
		Если ОбщаяСуммаДокумента > 0 Тогда
			
			СтрокаРасшифровки.Сумма 	= СтрокаРасшифровки.Сумма + ОбщаяСуммаДокумента;
			СтрокаРасшифровки.СуммаНДС 	= РасчетСуммыНДС( СтрокаРасшифровки.Сумма, СтрокаРасшифровки.СтавкаНДС );
				
		КонецЕсли;
					
		Если НЕ ЗначениеЗаполнено(ОбъектПКО.Партнер) Тогда
			
			
			ОбъектПКО.Комментарий = ОбъектПКО.Комментарий + ?(ЕстьКритическиеОшибки, " ", "") + "Не найден партнер:" + Выборка.CRMClientId;
			ЕстьКритическиеОшибки = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбъектПКО.Контрагент) Тогда
			
			
			ОбъектПКО.Комментарий = ОбъектПКО.Комментарий + ?(ЕстьКритическиеОшибки, " ", "") + "Не найден контрагент";
			ЕстьКритическиеОшибки = Истина;
		КонецЕсли;
		
		//Если НЕ ЗначениеЗаполнено(ОбъектПКО.ДокументОснование) Тогда
		//	
		//	
		//	ОбъектПКО.Комментарий = ОбъектПКО.Комментарий + ?(ЕстьКритическиеОшибки, " ", "") + "Не найдена реализация по номеру:" + Выборка.НомерРасходной;
		//	ЕстьКритическиеОшибки = Истина;
		//	
		//КонецЕсли;
		
		Если ОбъектПКО.ЭтоНовый() Тогда
			
			ОбъектПКО.УстановитьНовыйНомер();
			
		КонецЕсли;
		
		
		
		Если НЕ ЕстьКритическиеОшибки Тогда
			
			Попытка
				ОбъектПКО.Записать(РежимЗаписиДокумента.Проведение);
			исключение
				ОбъектПКО.Записать(РежимЗаписиДокумента.Запись);
				а = ОписаниеОшибки();
			КонецПопытки;
			
		Иначе
			ОбъектПКО.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		СтрокаМобильногоАгента = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		СтрокаМобильногоАгента.Объект 	= ОбъектПКО.Ссылка;
		СтрокаМобильногоАгента.Свойство = ВнешнийКодПКОРеквизит; 
		СтрокаМобильногоАгента.Значение = Выборка.ВнешнийКодПКО;
		СтрокаМобильногоАгента.Записать(Истина);
		
	КонецЦикла;
	
	
	
	
	
КонецПроцедуры

Функция УстановитьТипДанных( Тип, Размер = 12, Точность = 2 ) Экспорт
	Массив = Новый Массив;
	Массив.Добавить( Тип );
	
	Если Тип = Тип("Строка") Тогда
		Результат = Новый ОписаниеТипов( Массив, , Новый КвалификаторыСтроки( Размер ) );
	ИначеЕсли Тип = Тип("Число") Тогда 
		Результат = Новый ОписаниеТипов( Массив, Новый КвалификаторыЧисла( Размер, Точность ) );
	ИначеЕсли Тип = Тип("Дата") Тогда 
		Результат = Новый ОписаниеТипов( Массив, , , Новый КвалификаторыДаты( ЧастиДаты.ДатаВремя ) );  
	Иначе
		Результат = Новый ОписаниеТипов( Массив );
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция РасчетСуммыНДС( Сумма, СтавкаНДС )
	Результат = 0;
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		Результат = Сумма / 110 * 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда		
		Результат = Сумма / 118 * 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда		
		Результат = Сумма / 120 * 20;
	КонецЕсли;		
	Возврат Результат;
КонецФункции
#КонецОбласти

#КонецОбласти

#Область ЗаполнениеТарой

Процедура ЗаполнениеТарой(ТоварыДокумента) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура       КАК Номенклатура,
	|	ТоварыДокумента.Характеристика     КАК Характеристика,
	|	ТоварыДокумента.Количество         КАК Количество,
	|	ТоварыДокумента.Склад              КАК Склад,
	|	ТоварыДокумента.ДатаОтгрузки       КАК Дата
	|ПОМЕСТИТЬ
	|	ВтТоварыДокумента
	|ИЗ
	|	&ТоварыДокумента КАК ТоварыДокумента
	|ГДЕ
	|	ТоварыДокумента.Количество > 0
	|;
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура                                  КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика                                КАК Характеристика,
	|	ВтТоварыДокумента.Склад                                         КАК Склад,
	|	ВтТоварыДокумента.Дата                                          КАК Дата,
	|	0                                                               КАК КоличествоНоменклатуры,
	|	0                                                               КАК КоличествоТоваровДокумента,
	|	ВтТоварыДокумента.Номенклатура.НоменклатураМногооборотнаяТара   КАК НоменклатураМногооборотнаяТара,
	|	ВтТоварыДокумента.Номенклатура.ХарактеристикаМногооборотнаяТара КАК ХарактеристикаМногооборотнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)          КАК Упаковка,
	|	0                                                               КАК МинимальноеКоличествоУпаковокМногооборотнойТары
	|
	|ПОМЕСТИТЬ
	|	ВтТара
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И ВтТоварыДокумента.Номенклатура.ПоставляетсяВМногооборотнойТаре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура                                  КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика                                КАК Характеристика,
	|	ВтТоварыДокумента.Склад                                         КАК Склад,
	|	ВтТоварыДокумента.Дата                                          КАК Дата,
	|	ВтТоварыДокумента.Количество                                    КАК КоличествоНоменклатуры,
	|	0                                                               КАК КоличествоТоваровДокумента,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)                  КАК НоменклатураМногооборотнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)    КАК ХарактеристикаМногооборотнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)      КАК Упаковка,
	|	0                                                               КАК МинимальноеКоличествоУпаковокМногооборотнойТары
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура                                           КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика                                         КАК Характеристика,
	|	ВтТоварыДокумента.Склад                                                  КАК Склад,
	|	ВтТоварыДокумента.Дата                                                   КАК Дата,
	|	ВЫРАЗИТЬ(ВтТоварыДокумента.Количество / &ТекстЗапросаКоэффициентУпаковки1 КАК ЧИСЛО(15,0)) КАК КоличествоНоменклатуры,
	|	ВтТоварыДокумента.Количество                                             КАК КоличествоТоваровДокумента,
	|	УпаковкиНоменклатуры.НоменклатураМногооборотнаяТара                      КАК НоменклатураМногооборотнаяТара,
	|	УпаковкиНоменклатуры.ХарактеристикаМногооборотнаяТара                    КАК ХарактеристикаМногооборотнаяТара,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	УпаковкиНоменклатуры.МинимальноеКоличествоУпаковокМногооборотнойТары     КАК МинимальноеКоличествоУпаковокМногооборотнойТары
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|ПО
	|	ВтТоварыДокумента.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец
	|	ИЛИ (ВтТоварыДокумента.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|		И ВтТоварыДокумента.Номенклатура = УпаковкиНоменклатуры.Владелец)
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И НЕ УпаковкиНоменклатуры.ПометкаУдаления
	|	И УпаковкиНоменклатуры.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|;
	|ВЫБРАТЬ
	|	втТара.Номенклатура                                                        КАК Номенклатура,
	|	втТара.Характеристика                                                      КАК Характеристика,
	|	втТара.Склад                                                               КАК Склад,
	|	втТара.Дата                                                                КАК Дата,
	|	втТара.Упаковка                                                            КАК Упаковка,
	|	ВЫБОР
	|		КОГДА
	|			втТара.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.Составная)
	|		ТОГДА
	|			втТара.Упаковка.КоличествоУпаковок
	|		ИНАЧЕ
	|			&ТекстЗапросаКоэффициентУпаковки2
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	втТара.Упаковка.Родитель                                                   КАК Родитель,
	|	втТара.Номенклатура.ЕдиницаИзмерения                                       КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(втТара.МинимальноеКоличествоУпаковокМногооборотнойТары)           КАК МинимальноеКоличествоУпаковокМногооборотнойТары,
	|	МАКСИМУМ(втТара.НоменклатураМногооборотнаяТара)                            КАК НоменклатураМногооборотнаяТара,
	|	МАКСИМУМ(втТара.ХарактеристикаМногооборотнаяТара)                          КАК ХарактеристикаМногооборотнаяТара,
	|	МАКСИМУМ(втТара.КоличествоТоваровДокумента) 							   КАК КоличествоТоваровДокумента,
	|	МАКСИМУМ(втТара.КоличествоНоменклатуры)                                    КАК КоличествоНоменклатуры
	|ИЗ
	|	втТара КАК втТара
	|СГРУППИРОВАТЬ ПО
	|	втТара.Номенклатура,
	|	втТара.Характеристика,
	|	втТара.Склад,
	|	втТара.Дата,
	|	втТара.Упаковка
	|УПОРЯДОЧИТЬ ПО
	|	втТара.Номенклатура,
	|	втТара.Характеристика,
	|	втТара.Склад,
	|	втТара.Дата,
	|	КоличествоУпаковок Убыв,
	|	втТара.Упаковка
	|ИТОГИ
	|	МАКСИМУМ(НоменклатураМногооборотнаяТара),
	|	МАКСИМУМ(ХарактеристикаМногооборотнаяТара)
	|ПО
	|	втТара.Номенклатура,
	|	втТара.Характеристика,
	|	втТара.Склад,
	|	втТара.Дата
	|;
	|ВЫБРАТЬ
	|	ВтТоварыДокумента.Номенклатура      КАК Номенклатура,
	|	ВтТоварыДокумента.Характеристика    КАК Характеристика,
	|	ВтТоварыДокумента.Склад             КАК Склад,
	|	ВтТоварыДокумента.Дата              КАК Дата,
	|	СУММА(ВтТоварыДокумента.Количество) КАК НачальноеКоличествоТары,
	|	СУММА(ВтТоварыДокумента.Количество) КАК КоличествоТары,
	|	НЕОПРЕДЕЛЕНО                        КАК СтрокаДерева
	|ИЗ
	|	ВтТоварыДокумента КАК ВтТоварыДокумента
	|ГДЕ
	|	ВтТоварыДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыДокумента.Номенклатура,
	|	ВтТоварыДокумента.Характеристика,
	|	ВтТоварыДокумента.Склад,
	|	ВтТоварыДокумента.Дата
	|УПОРЯДОЧИТЬ ПО
	|	ВтТоварыДокумента.Номенклатура.Наименование,
	|	ВтТоварыДокумента.Характеристика.Наименование,
	|	ВтТоварыДокумента.Склад.Наименование,
	|	ВтТоварыДокумента.Дата";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры", Неопределено));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"втТара.Упаковка",
		"втТара.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Товары = ТоварыДокумента.Выгрузить();
	//Попытка
		Товары.Свернуть("ДатаОтгрузки, Номенклатура, Характеристика, Склад", "Количество");
	//Исключение
	//	Товары.Свернуть("Номенклатура, Характеристика", "Количество");
	//КонецПопытки;
	
	Запрос.УстановитьПараметр("ТоварыДокумента", Товары);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДеревоТара = Новый ДеревоЗначений;
	ДеревоТара.Колонки.Добавить("Номенклатура");
	ДеревоТара.Колонки.Добавить("Характеристика");
	ДеревоТара.Колонки.Добавить("Склад");
	ДеревоТара.Колонки.Добавить("Дата");
	ДеревоТара.Колонки.Добавить("Упаковка");
	ДеревоТара.Колонки.Добавить("Родитель");
	ДеревоТара.Колонки.Добавить("КоличествоНоменклатуры");
	ДеревоТара.Колонки.Добавить("КоличествоУпаковок");
	ДеревоТара.Колонки.Добавить("ПодобранноеКоличествоТары");
	ДеревоТара.Колонки.Добавить("РекомендуемоеКоличествоТары");
	ДеревоТара.Колонки.Добавить("КоличествоТарыВДокументе");
	ДеревоТара.Колонки.Добавить("НоменклатураМногооборотнаяТара");
	ДеревоТара.Колонки.Добавить("ХарактеристикаМногооборотнаяТара");
	ДеревоТара.Колонки.Добавить("МинимальноеКоличествоУпаковокМногооборотнойТары");
	ДеревоТара.Колонки.Добавить("Выбрана");
	
	ВсяТараПодобрана = Истина;
	
	Если Не РезультатЗапроса[2].Пустой() Тогда
		
		ВыборкаНоменклатура = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТараДокумента = РезультатЗапроса[3].Выгрузить();
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				ВыборкаСклады = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаСклады.Следующий() Цикл
				
					ВыборкаДаты = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаДаты.Следующий() Цикл
						
						ВыборкаУпаковки = ВыборкаДаты.Выбрать();
						
						ТаблицаУпаковок = Новый ТаблицаЗначений();
						ТаблицаУпаковок.Колонки.Добавить("Номенклатура");
						ТаблицаУпаковок.Колонки.Добавить("Характеристика");
						ТаблицаУпаковок.Колонки.Добавить("Склад");
						ТаблицаУпаковок.Колонки.Добавить("Дата");
						ТаблицаУпаковок.Колонки.Добавить("Упаковка");
						ТаблицаУпаковок.Колонки.Добавить("Родитель");
						ТаблицаУпаковок.Колонки.Добавить("КоличествоНоменклатуры");
						ТаблицаУпаковок.Колонки.Добавить("КоличествоУпаковок");
						ТаблицаУпаковок.Колонки.Добавить("НоменклатураМногооборотнаяТара");
						ТаблицаУпаковок.Колонки.Добавить("ХарактеристикаМногооборотнаяТара");
						ТаблицаУпаковок.Колонки.Добавить("МинимальноеКоличествоУпаковокМногооборотнойТары");
						
						ТаблицаУпаковок.Сортировать("КоличествоНоменклатуры Убыв");
						
						Пока ВыборкаУпаковки.Следующий() Цикл
							
							Если ЗначениеЗаполнено(ВыборкаУпаковки.Упаковка) Тогда
								
								НоваяСтрокаУпаковка = ТаблицаУпаковок.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковка, ВыборкаУпаковки);
								
								Если ЗначениеЗаполнено(НоваяСтрокаУпаковка.НоменклатураМногооборотнаяТара) 
									И ВыборкаУпаковки.КоличествоУпаковок > 0 Тогда
									КоличествоТары = Цел(ВыборкаУпаковки.КоличествоТоваровДокумента/ВыборкаУпаковки.КоличествоУпаковок);
									ОстатокТары = ВыборкаУпаковки.КоличествоТоваровДокумента - ВыборкаУпаковки.КоличествоУпаковок*КоличествоТары;
									
									Если ОстатокТары > 0 
										И ОстатокТары >= НоваяСтрокаУпаковка.МинимальноеКоличествоУпаковокМногооборотнойТары
										И НоваяСтрокаУпаковка.МинимальноеКоличествоУпаковокМногооборотнойТары > 0 Тогда
										КоличествоТары = КоличествоТары + 1;
									КонецЕсли; 
									НоваяСтрокаУпаковка.КоличествоНоменклатуры = КоличествоТары; 
								КонецЕсли;
							Иначе
								
								НоваяСтрока = ДеревоТара.Строки.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаУпаковки);
								
								Если ЗначениеЗаполнено(НоваяСтрока.НоменклатураМногооборотнаяТара) Тогда
									
									НоваяСтрока.РекомендуемоеКоличествоТары = Цел(НоваяСтрока.КоличествоНоменклатуры);
									НоваяСтрока.ПодобранноеКоличествоТары = НоваяСтрока.РекомендуемоеКоличествоТары;
									
									ЗаполнитьКоличествоТарыИзДокумента(ТараДокумента, НоваяСтрока, ВсяТараПодобрана);
									
								КонецЕсли;
								
							КонецЕсли;
								
						КонецЦикла;
						
						ВывестиПодчиненныеУпаковки(
							НоваяСтрока.Строки,
							Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(),
							ТаблицаУпаковок,
							ТараДокумента,
							ВсяТараПодобрана);
								
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ТараДокумента Цикл
			
			Если ТекСтрока.НачальноеКоличествоТары = ТекСтрока.КоличествоТары Тогда
				
				НоваяСтрока = ДеревоТара.Строки.Добавить();
				НоваяСтрока.НоменклатураМногооборотнаяТара = ТекСтрока.Номенклатура;
				НоваяСтрока.ХарактеристикаМногооборотнаяТара = ТекСтрока.Характеристика;
				НоваяСтрока.КоличествоТарыВДокументе = ТекСтрока.КоличествоТары;
				НоваяСтрока.Склад = ТекСтрока.Склад;
				НоваяСтрока.Дата = ТекСтрока.Дата;
				НоваяСтрока.Выбрана = Истина;
				ВсяТараПодобрана = Ложь;
				
			ИначеЕсли ТекСтрока.КоличествоТары > 0 И ТекСтрока.СтрокаДерева <> Неопределено Тогда
				
				ТекСтрока.СтрокаДерева.КоличествоТарыВДокументе = ТекСтрока.СтрокаДерева.КоличествоТарыВДокументе + ТекСтрока.КоличествоТары;
				
				Если ТекСтрока.СтрокаДерева.КоличествоТарыВДокументе <> ТекСтрока.СтрокаДерева.ПодобранноеКоличествоТары Тогда
					ТекСтрока.СтрокаДерева.Выбрана = Истина;
					ВсяТараПодобрана = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//*---------------
	//*-процедура закрытия
	
	ЕстьПодобраннаяТара = Ложь;
	
	ПроверитьДеревоНаНаличиеВыбранныхСтрок(ДеревоТара.Строки,ЕстьПодобраннаяТара);
	
	Если ЕстьПодобраннаяТара Тогда

		ТаблицаТары = Новый ТаблицаЗначений();
		ТаблицаТары.Колонки.Добавить("Номенклатура");
		ТаблицаТары.Колонки.Добавить("Характеристика");
		ТаблицаТары.Колонки.Добавить("Количество");
		ТаблицаТары.Колонки.Добавить("Склад");
		ТаблицаТары.Колонки.Добавить("Дата");
		
		ДобавитьПодобраннуюТаруВТаблицу(ДеревоТара.Строки, ТаблицаТары);
		
		ТаблицаТары.Свернуть("Номенклатура,Характеристика,Склад,Дата", "Количество");

	Иначе 
		Возврат;
		
	КонецЕсли;
	
	
	МассивУдаляемыхСтрок = Новый Массив();
	ИменаКолонок = "Номенклатура,Характеристика,Склад,ДатаОтгрузки";
	МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаКолонок, ",");
	
	ИскатьПозицииБезНаборов = Неопределено;
	Для Каждого СтрокаТЧ Из ТоварыДокумента Цикл
		ИскатьПозицииБезНаборов = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТЧ, "НоменклатураНабора");
		Прервать;
	КонецЦикла;
	
	Для Каждого СтрокаТоваров Из ТаблицаТары Цикл
		
		СтруктураПоиска = Новый Структура(ИменаКолонок);
		СтруктураПоиска[МассивКолонок[0]] = СтрокаТоваров.Номенклатура;
		СтруктураПоиска[МассивКолонок[1]] = СтрокаТоваров.Характеристика;
		Если МассивКолонок.Количество() = 4 Тогда
			Если ЗначениеЗаполнено(МассивКолонок[3]) Тогда
				СтруктураПоиска[МассивКолонок[3]] = СтрокаТоваров.Дата;
			КонецЕсли;
			Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
				СтруктураПоиска[МассивКолонок[2]] = СтрокаТоваров.Склад;
			КонецЕсли;
		ИначеЕсли МассивКолонок.Количество() = 3 Тогда
			Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
				СтруктураПоиска[МассивКолонок[2]] = СтрокаТоваров.Склад;
			КонецЕсли;
		КонецЕсли;
		
		ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоваров.Номенклатура, "ИспользованиеХарактеристик");
		ХарактеристикаНеУказана    = ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать
			И НЕ ЗначениеЗаполнено(СтрокаТоваров.Характеристика);
			
		Если ХарактеристикаНеУказана Тогда
			
			СтруктураПоиска.Удалить(МассивКолонок[1]);
			
		КонецЕсли;
		
		Если ИскатьПозицииБезНаборов = Истина Тогда
			СтруктураПоиска.Вставить("НоменклатураНабора", Справочники.Номенклатура.ПустаяСсылка());
		КонецЕсли;
		
		МассивСтрокТЧТовары = ТоварыДокумента.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокаТоваров.Количество = 0 Тогда
			
			Для Каждого ТекЭлемент Из МассивСтрокТЧТовары Цикл
				МассивУдаляемыхСтрок.Добавить(ТекЭлемент);
			КонецЦикла;
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧТовары = ТоварыДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
			СтрокаТЧТовары.КоличествоУпаковок = СтрокаТЧТовары.Количество;
			
			//*-
			СтрокаТЧТовары.СтавкаНДС 		    = СтрокаТЧТовары.Номенклатура.СтавкаНДС;			
			СтрокаТЧТовары.Отменено 			= Ложь;
			СтрокаТЧТовары.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
			
			
			//*-
			
			Если МассивКолонок.Количество() = 4 Тогда
				Если ЗначениеЗаполнено(МассивКолонок[3]) Тогда
					СтрокаТЧТовары[МассивКолонок[3]] = СтрокаТоваров.Дата;
				КонецЕсли;
				Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
					СтрокаТЧТовары[МассивКолонок[2]] = СтрокаТоваров.Склад;
				КонецЕсли;
			ИначеЕсли МассивКолонок.Количество() = 3 Тогда
				Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
					СтрокаТЧТовары[МассивКолонок[2]] = СтрокаТоваров.Склад;
				КонецЕсли;
			КонецЕсли;
						
		ИначеЕсли МассивСтрокТЧТовары.Количество() > 0 Тогда
			
			СтрокаТЧТовары = МассивСтрокТЧТовары[0];
			
			Если СтрокаТЧТовары.Количество <> СтрокаТоваров.Количество Тогда
				
				ПредыдущаяХарактеристика = СтрокаТЧТовары.Характеристика;
				
				ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
					
				Если ХарактеристикаНеУказана Тогда 
					
					СтрокаТЧТовары.Характеристика = ПредыдущаяХарактеристика;
					
				КонецЕсли;
				
				Если МассивКолонок.Количество() = 4 Тогда
					Если ЗначениеЗаполнено(МассивКолонок[3]) Тогда
						СтрокаТЧТовары[МассивКолонок[3]] = СтрокаТоваров.Дата;
					КонецЕсли;
					Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
						СтрокаТЧТовары[МассивКолонок[2]] = СтрокаТоваров.Склад;
					КонецЕсли;
				ИначеЕсли МассивКолонок.Количество() = 3 Тогда
					Если ЗначениеЗаполнено(МассивКолонок[2]) Тогда
						СтрокаТЧТовары[МассивКолонок[2]] = СтрокаТоваров.Склад;
					КонецЕсли;
				КонецЕсли;
					
				//ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействийИзмененныеСтроки, КэшированныеЗначения);
				
			КонецЕсли;
			
			Если МассивСтрокТЧТовары.Количество() > 1 Тогда
				Для Счетчик = 2 По МассивСтрокТЧТовары.Количество() Цикл
					МассивУдаляемыхСтрок.Добавить(МассивСтрокТЧТовары[Счетчик-1]);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивУдаляемыхСтрок Цикл
		ТоварыДокумента.Удалить(ТекЭлемент);
	КонецЦикла;
	
		
КонецПроцедуры

Процедура ВывестиПодчиненныеУпаковки(УпаковкиСтроки, УпаковкаУзел, ТаблицаУпаковок, ТараДокумента, ВсяТараПодобрана)
	
	ПодчиненныеУпаковки = ТаблицаУпаковок.НайтиСтроки(Новый Структура("Родитель", УпаковкаУзел));
	КоличествоНоменклатуры = УпаковкиСтроки.Родитель.КоличествоНоменклатуры;
	КоличествоНоменклатурыКРаспределению = КоличествоНоменклатуры;
	
	Для Каждого ТекСтрока Из ПодчиненныеУпаковки Цикл
		
		НоваяСтрокаУпаковка = УпаковкиСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковка, ТекСтрока);
		
		Если ЗначениеЗаполнено(НоваяСтрокаУпаковка.НоменклатураМногооборотнаяТара) Тогда
		
			КоличествоТары = Цел(КоличествоНоменклатурыКРаспределению/ТекСтрока.КоличествоУпаковок);
			ОстатокТары = КоличествоНоменклатурыКРаспределению - ТекСтрока.КоличествоУпаковок*КоличествоТары;
			
			Если ОстатокТары > 0 
				И ОстатокТары >= ТекСтрока.МинимальноеКоличествоУпаковокМногооборотнойТары
				И ТекСтрока.МинимальноеКоличествоУпаковокМногооборотнойТары > 0 Тогда
				КоличествоТары = КоличествоТары + 1;
				ОстатокТары = 0;
			КонецЕсли; 
			
			Если КоличествоТары > 0 Тогда
				НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары = КоличествоТары;
				НоваяСтрокаУпаковка.ПодобранноеКоличествоТары = НоваяСтрокаУпаковка.РекомендуемоеКоличествоТары;
				КоличествоНоменклатурыКРаспределению = ОстатокТары;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьКоличествоТарыИзДокумента(ТараДокумента, НоваяСтрокаУпаковка, ВсяТараПодобрана);
			
		ВывестиПодчиненныеУпаковки(
			НоваяСтрокаУпаковка.Строки,
			ТекСтрока.Упаковка,
			ТаблицаУпаковок,
			ТараДокумента,
			ВсяТараПодобрана);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоТарыИзДокумента(ТараДокумента, СтрокаДерева, ВсяТараПодобрана)
	
	ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДерева.НоменклатураМногооборотнаяТара, "ИспользованиеХарактеристик");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", СтрокаДерева.НоменклатураМногооборотнаяТара);
	ПараметрыОтбора.Вставить("Склад", СтрокаДерева.Склад);
	ПараметрыОтбора.Вставить("Дата", СтрокаДерева.Дата);
	
	Если ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать
		И НЕ ЗначениеЗаполнено(СтрокаДерева.ХарактеристикаМногооборотнаяТара) Тогда
		
		ТараДокументаСтроки = ТараДокумента.НайтиСтроки(ПараметрыОтбора);
		
	Иначе
		
		ПараметрыОтбора.Вставить("Характеристика", СтрокаДерева.ХарактеристикаМногооборотнаяТара);		
		ТараДокументаСтроки = ТараДокумента.НайтиСтроки(ПараметрыОтбора);
		
	КонецЕсли;
	
	Если ТараДокументаСтроки.Количество() > 0 И ТараДокументаСтроки[0].КоличествоТары > 0  Тогда
		
		СтрокаДерева.КоличествоТарыВДокументе = Мин(СтрокаДерева.РекомендуемоеКоличествоТары, ТараДокументаСтроки[0].КоличествоТары);
		ТараДокументаСтроки[0].КоличествоТары = ТараДокументаСтроки[0].КоличествоТары - СтрокаДерева.КоличествоТарыВДокументе;
		ТараДокументаСтроки[0].СтрокаДерева = СтрокаДерева;
		
	КонецЕсли;
	
	Если СтрокаДерева.КоличествоТарыВДокументе <> СтрокаДерева.ПодобранноеКоличествоТары Тогда
		СтрокаДерева.Выбрана = Истина;
		ВсяТараПодобрана = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьДеревоНаНаличиеВыбранныхСтрок(СтрокиДерева,ЕстьПодобраннаяТара)
	
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		
		Если ЕстьПодобраннаяТара Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекСтрока.Выбрана = Истина Тогда
			ЕстьПодобраннаяТара =  Истина;
			Прервать;
		КонецЕсли;
		
		ПроверитьДеревоНаНаличиеВыбранныхСтрок(ТекСтрока.Строки,ЕстьПодобраннаяТара)
		
	КонецЦикла;	
	
КонецФункции

Процедура ДобавитьПодобраннуюТаруВТаблицу(СтрокиДерева, ТаблицаТары)
	
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		
		Если (ТекСтрока.Выбрана = Истина Или (Не ТекСтрока.Выбрана = Истина И ?(ТекСтрока.КоличествоТарыВДокументе = Неопределено,0,ТекСтрока.КоличествоТарыВДокументе) > 0))
			И ЗначениеЗаполнено(ТекСтрока.НоменклатураМногооборотнаяТара) Тогда
			
			НоваяСтрока = ТаблицаТары.Добавить();
			НоваяСтрока.Номенклатура = ТекСтрока.НоменклатураМногооборотнаяТара;
			НоваяСтрока.Характеристика = ТекСтрока.ХарактеристикаМногооборотнаяТара;
			НоваяСтрока.Количество = ?(ТекСтрока.Выбрана, ТекСтрока.ПодобранноеКоличествоТары, ТекСтрока.КоличествоТарыВДокументе);
			НоваяСтрока.Склад = ТекСтрока.Склад;
			НоваяСтрока.Дата = ТекСтрока.Дата;
			
		КонецЕсли;
		
		ДобавитьПодобраннуюТаруВТаблицу(ТекСтрока.Строки, ТаблицаТары);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти