
#Область ЗаписьЗапросаСтатусовДокументов

Процедура ЗаписьЗапросаСтатусовДокументовВРегистрПоВсемАктивнымШлюзам() Экспорт
	
	Параметры 			 	= Новый Массив;
	МассивСтруктурШлюзов 	= Новый Массив;
	Запрос 					= Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаАктуальныеШлюзы();
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоШлюзовВПакете = 7;
	
	НомерШлюза = 1;
	
	ОбщееКоличествоШлюзов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктурыШлюзов = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		ЗаполнитьЗначенияСвойств(СтруктурыШлюзов, Выборка);
		СтруктурыШлюзов.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMOrderStatus;
		
		МассивСтруктурШлюзов.Добавить(СтруктурыШлюзов);
		
		Если (НомерШлюза <> 1 И КоличествоШлюзовВПакете % НомерШлюза = 0) ИЛИ НомерШлюза = ОбщееКоличествоШлюзов Тогда			
			ВыполнитьЗаписьЗапросаСтатусовДокументовВРегистрФоном(МассивСтруктурШлюзов);
			//Параметры.Добавить(МассивСтруктурШлюзов);
			//ФоновыеЗадания.Выполнить("Mon_ЗаписьВРегистр.ВыполнитьЗаписьЗапросаСтатусовДокументовВРегистрФоном", 
			//	Параметры, Новый УникальныйИдентификатор, "Фоновое выполнение СRMMonolit");	
				
			Параметры.Очистить();
				
		КонецЕсли;
		
		НомерШлюза = НомерШлюза + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьЗапросаСтатусовДокументовВРегистрФоном(МассивСтруктурШлюзов) Экспорт
	
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	Запрос = Новый Запрос;

	ТЗСтруктурШлюзов = ВернутьТаблицуЗначенийПоМассивуСтруктурШлюзов(МассивСтруктурШлюзов);			
	
	Если МассивСтруктурШлюзов.Количество() > 0 И НЕ МассивСтруктурШлюзов[0].ДатаОтчета = '00010101' Тогда 
		ДатаОтчета = НачалоДня(МассивСтруктурШлюзов[0].ДатаОтчета);
	Иначе
		ДатаОтчета = НачалоДня(ТекущаяДата());		
	КонецЕсли;
	
	
	МассивСтруктурШлюзов = Неопределено;
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	

	
	ДатаОтчетаСтрокой = Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ДатаОтчета);	
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаСтатусовДокументов();
			
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	Запрос.УстановитьПараметр("ТЗ", ТЗСтруктурШлюзов);
	Запрос.УстановитьПараметр("ДатаОтчетаСтрокой", ДатаОтчетаСтрокой);
	ВыборкаПоШлюзам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоШлюзам.Следующий() Цикл
		
		СтруктураШлюзовДляОтправки = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		
		XML = Новый ЗаписьXML;
		
		XML.УстановитьСтроку("windows-1251");
		//XML.ЗаписатьОбъявлениеXML();
		
		ЗаписатьВXMLЗаголовкиИзЗапросаСтатусовДокументов(XML, ВыборкаПоШлюзам);
			
 		ВыборкаПоДокументам =  ВыборкаПоШлюзам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			ЗаписатьВXMLИнформациюПоДокументуИзЗапросаСтатусовДокументов(XML, ВыборкаПоДокументам);
			
		КонецЦикла;
		
		XML.ЗаписатьКонецЭлемента(); //d
		XML.ЗаписатьКонецЭлемента(); //o
		XML.ЗаписатьКонецЭлемента(); //data
		XML.ЗаписатьКонецЭлемента(); //scheme	
		XML.ЗаписатьКонецЭлемента(); //extdata

		СтрXML = XML.Закрыть();
		
		ЗаполнитьЗначенияСвойств(СтруктураШлюзовДляОтправки, ВыборкаПоШлюзам);
		
		СтруктураШлюзовДляОтправки.ТекстОбмена = СтрXML;
		
		МассивСтруктурШлюзовДляОтправки.Добавить(СтруктураШлюзовДляОтправки);
		
	КонецЦикла;
				
	ЗаписатьМассивСтрокВРегистрИсходящиеДанные(МассивСтруктурШлюзовДляОтправки);
	
КонецПроцедуры

Процедура ЗаписатьВXMLЗаголовкиИзЗапросаСтатусовДокументов(XML, ВыборкаПоОрганизациям)
	
	XML.ЗаписатьНачалоЭлемента("extdata");
	XML.ЗаписатьАтрибут("user", 	ВыборкаПоОрганизациям.Шлюз);
	XML.ЗаписатьАтрибут("password", ВыборкаПоОрганизациям.Пароль);
	XML.ЗаписатьНачалоЭлемента("scheme");
	XML.ЗаписатьАтрибут("name", "CRMOrderStatus");
	XML.ЗаписатьАтрибут("request", "set");

	XML.ЗаписатьНачалоЭлемента("data");
	
	XML.ЗаписатьНачалоЭлемента("s");
		
		XML.ЗаписатьНачалоЭлемента("d");
		
			XML.ЗаписатьАтрибут( "name", "CRMOrderStatus" );	
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CRMOrderNumber", 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "StatusId", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "UserName",	 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "HostName", 			"String");			
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "OperationTime",		"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "RejectReasonCode",		"Integer");
			
		XML.ЗаписатьКонецЭлемента(); //d	
	XML.ЗаписатьКонецЭлемента(); //s	
	
	XML.ЗаписатьНачалоЭлемента("o");
	    XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMOrderStatus");
		
КонецПроцедуры

Процедура ЗаписатьВXMLИнформациюПоДокументуИзЗапросаСтатусовДокументов(XML, ВыборкаПоДокументам)
	
	XML.ЗаписатьНачалоЭлемента("r");

	    ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоДокументам.КодДокумента); //CRMOrderNumber
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоДокументам.Статус);    //StatusId
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "monoobmen");	 	
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ИмяКомпьютера());  
		ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ВыборкаПоДокументам.ДатаДокумента));
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "");
		
	XML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЗапросаОстатки

Процедура ЗаписьЗапросаОстатковВРегистрПоВсемАктивнымШлюзам() Экспорт
	
	Параметры 			 	= Новый Массив;
	МассивСтруктурШлюзов 	= Новый Массив;
	Запрос 					= Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаАктуальныеШлюзы();
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоШлюзовВПакете = 7;
	
	НомерШлюза = 1;
	
	ОбщееКоличествоШлюзов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктурыШлюзов = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		ЗаполнитьЗначенияСвойств(СтруктурыШлюзов, Выборка);
		СтруктурыШлюзов.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMWhBalanceEx;
		
		МассивСтруктурШлюзов.Добавить(СтруктурыШлюзов);
		
		Если (НомерШлюза <> 1 И КоличествоШлюзовВПакете % НомерШлюза = 0) ИЛИ НомерШлюза = ОбщееКоличествоШлюзов Тогда			
			
			//ВыполнитьЗаписьЗапросаОстатковВРегистрФоном(МассивСтруктурШлюзов);
			Параметры.Добавить(МассивСтруктурШлюзов);
			ФоновыеЗадания.Выполнить("Mon_ЗаписьВРегистр.ВыполнитьЗаписьЗапросаОстатковВРегистрФоном", 
        		Параметры, Новый УникальныйИдентификатор, "Фоновое выполнение СRMMonolit");	
				
			Параметры.Очистить();
				
		КонецЕсли;
		
		НомерШлюза = НомерШлюза + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьЗапросаОстатковВРегистрФоном(МассивСтруктурШлюзов) Экспорт
	
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	ЗапросОстатков = Новый Запрос;
	
	ТЗСтруктурШлюзов = ВернутьТаблицуЗначенийПоМассивуСтруктурШлюзов(МассивСтруктурШлюзов);			
	
	Если МассивСтруктурШлюзов.Количество() > 0 И НЕ МассивСтруктурШлюзов[0].ДатаОтчета = '00010101' Тогда 
		ДатаОтчета = НачалоДня(МассивСтруктурШлюзов[0].ДатаОтчета);
	Иначе
		ДатаОтчета = НачалоДня(ТекущаяДата());		
	КонецЕсли;

	МассивСтруктурШлюзов = Неопределено;
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	
	
	ДатаОтчетаСтрокой = Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ДатаОтчета);
	
	ЗапросОстатков.Текст = Mon_Общий.ВернутьТекстЗапросаОстатков();		
	ЗапросОстатков.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	ЗапросОстатков.УстановитьПараметр("ТЗ", ТЗСтруктурШлюзов);
	ЗапросОстатков.УстановитьПараметр("ДатаОтчетаСтрокой", ДатаОтчетаСтрокой);
	ВыборкаПоОрганизациям = ЗапросОстатков.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		СтруктураШлюзовДляОтправки = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		
		XML = Новый ЗаписьXML;
		
		XML.УстановитьСтроку("windows-1251");
		//XML.ЗаписатьОбъявлениеXML();
		ЗаписатьВXMLЗаголовкиИзЗапросаОстатков(XML, ВыборкаПоОрганизациям);
			
 		ВыборкаПоСкладам =  ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			ВыборкаПоТоварам = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ЗаписатьВXMLИнформациюПоСкладуИзЗапросаОстатков(XML, ВыборкаПоСкладам);
			
			Пока ВыборкаПоТоварам.Следующий() Цикл
				Если ВыборкаПоТоварам.ВНаличииОстаток < 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписатьВXMLИнформациюПоТоварамИзЗапросаОстатков(XML, ВыборкаПоТоварам);
							
			КонецЦикла;
			XML.ЗаписатьКонецЭлемента(); //d
			XML.ЗаписатьКонецЭлемента(); //r

		КонецЦикла;
		XML.ЗаписатьКонецЭлемента(); //d
		XML.ЗаписатьКонецЭлемента(); //o
		XML.ЗаписатьКонецЭлемента(); //data
		XML.ЗаписатьКонецЭлемента(); //scheme	
		XML.ЗаписатьКонецЭлемента(); //extdata

		СтрXML = XML.Закрыть();
		
		ЗаполнитьЗначенияСвойств(СтруктураШлюзовДляОтправки, ВыборкаПоОрганизациям);
		
		СтруктураШлюзовДляОтправки.ТекстОбмена = СтрXML;
		
		МассивСтруктурШлюзовДляОтправки.Добавить(СтруктураШлюзовДляОтправки);
		
	КонецЦикла;
				
	ЗаписатьМассивСтрокВРегистрИсходящиеДанные(МассивСтруктурШлюзовДляОтправки);
	
КонецПроцедуры

Процедура ЗаписатьВXMLЗаголовкиИзЗапросаОстатков(XML, ВыборкаПоОрганизациям)
	
	XML.ЗаписатьНачалоЭлемента("extdata");
	XML.ЗаписатьАтрибут("user", 	ВыборкаПоОрганизациям.Шлюз);
	XML.ЗаписатьАтрибут("password", ВыборкаПоОрганизациям.Пароль);
	XML.ЗаписатьНачалоЭлемента("scheme");
	XML.ЗаписатьАтрибут("name", "CRMWhBalanceEx");
	XML.ЗаписатьАтрибут("request", "set");

	XML.ЗаписатьНачалоЭлемента("data");
	
		XML.ЗаписатьНачалоЭлемента("s");
		
			XML.ЗаписатьНачалоЭлемента("d");
				XML.ЗаписатьАтрибут( "name", "CRMWhBalanceParam" );
				ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "SkipDelete", "Integer");
			XML.ЗаписатьКонецЭлемента();
			
			XML.ЗаписатьНачалоЭлемента("d");
				XML.ЗаписатьАтрибут( "name", "CRMWhBalance" );	
				ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "WareHouseId", 		"String");
				ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentDate", 		"String");
				ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentNumber",	 	"String");
				ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "PersonId", 			"String");			
						
				XML.ЗаписатьНачалоЭлемента("d");
					XML.ЗаписатьАтрибут( "name", "CRMWhBalanceLine" );
						ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "WareId", "String");
						ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "UnitId", "String");
						ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "Quantity", "String");
				XML.ЗаписатьКонецЭлемента();
			XML.ЗаписатьКонецЭлемента(); //d
		XML.ЗаписатьКонецЭлемента(); //s	
 
	
	
		XML.ЗаписатьНачалоЭлемента("o");
			XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMWhBalanceParam");
				XML.ЗаписатьНачалоЭлемента("r");
					ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоОрганизациям.ФлагУдаления);	
				XML.ЗаписатьКонецЭлемента();//r
			XML.ЗаписатьКонецЭлемента();//d	
		    XML.ЗаписатьНачалоЭлемента("d");
				XML.ЗаписатьАтрибут( "name", "CRMWhBalance");
		
КонецПроцедуры

Процедура ЗаписатьВXMLИнформациюПоСкладуИзЗапросаОстатков(XML, ВыборкаПоСкладам)
	XML.ЗаписатьНачалоЭлемента("r");
	ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоСкладам.КодСклада);
	ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоСкладам.ДатаОтчетаСтрокой);
				
	XML.ЗаписатьНачалоЭлемента("f");	
	XML.ЗаписатьКонецЭлемента();
	
	XML.ЗаписатьНачалоЭлемента("f");	
	XML.ЗаписатьКонецЭлемента();
	
	XML.ЗаписатьНачалоЭлемента("d");
	XML.ЗаписатьАтрибут( "name", "CRMWhBalanceLine" );
	
КонецПроцедуры

Процедура ЗаписатьВXMLИнформациюПоТоварамИзЗапросаОстатков(XML, ВыборкаПоТоварам)
	
	XML.ЗаписатьНачалоЭлемента("r");
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоТоварам.НоменклатураМонолит);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоТоварам.УпаковкаМонолит);
		ЗаписатьВXMLСтрокуСТекст(XML, "f",  ФОРМАТ(ВыборкаПоТоварам.ВНаличииОстаток, "ЧГ="));
	XML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ВернутьТаблицуЗначенийПоМассивуСтруктурШлюзов(МассивСтруктурШлюзов)
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ШлюзОрганизации", 	Mon_Общий.УстановитьТипДанных( Тип("СправочникСсылка.Mon_ШлюзыОрганизации")));
	Результат.Колонки.Добавить("Шлюз", 				Mon_Общий.УстановитьТипДанных( Тип("Строка"), 25));
	Результат.Колонки.Добавить("ВидОбмена", 		Mon_Общий.УстановитьТипДанных( Тип("ПеречислениеСсылка.Mon_ВидыОбменов")));
	Результат.Колонки.Добавить("ФлагУдаления", 		Mon_Общий.УстановитьТипДанных( Тип("Строка"), 1)); 					
	
	Для Каждого СтруктураШлюза Из МассивСтруктурШлюзов Цикл		
		
		СтрокаТЗ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтруктураШлюза);
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаписьЗапросаОстаткиПоПартиям

Процедура ЗаписьЗапросаОстатковПоПартиямВРегистрПоВсемАктивнымШлюзам() Экспорт
	
	Параметры 			 	= Новый Массив;
	МассивСтруктурШлюзов 	= Новый Массив;
	Запрос 					= Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаАктуальныеШлюзы();
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоШлюзовВПакете = 7;
	
	НомерШлюза = 1;
	
	ОбщееКоличествоШлюзов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктурыШлюзов = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		ЗаполнитьЗначенияСвойств(СтруктурыШлюзов, Выборка);
		СтруктурыШлюзов.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMWhBalanceExParts;
		
		МассивСтруктурШлюзов.Добавить(СтруктурыШлюзов);
		
		Если (НомерШлюза <> 1 И КоличествоШлюзовВПакете % НомерШлюза = 0) ИЛИ НомерШлюза = ОбщееКоличествоШлюзов Тогда			
			
			
			//Mon_ЗаписьВРегистр.ВыполнитьЗаписьЗапросаОстатковПоПартиямВРегистрФоном(МассивСтруктурШлюзов);
			
			Параметры.Добавить(МассивСтруктурШлюзов);
			ФоновыеЗадания.Выполнить("Mon_ЗаписьВРегистр.ВыполнитьЗаписьЗапросаОстатковПоПартиямВРегистрФоном", 
				Параметры, Новый УникальныйИдентификатор, "Фоновое выполнение СRMMonolit");	
				
			Параметры.Очистить();
				
		КонецЕсли;
		
		НомерШлюза = НомерШлюза + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьЗапросаОстатковПоПартиямВРегистрФоном(МассивСтруктурШлюзов) Экспорт
	
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	
	ТЗСтруктурШлюзов = ВернутьТаблицуЗначенийПоМассивуСтруктурШлюзов(МассивСтруктурШлюзов);			
	
	Если МассивСтруктурШлюзов.Количество() > 0 И НЕ МассивСтруктурШлюзов[0].ДатаОтчета = '00010101' Тогда 
		ДатаОтчета = НачалоДня(МассивСтруктурШлюзов[0].ДатаОтчета);
	Иначе
		ДатаОтчета = НачалоДня(ТекущаяДата());		
	КонецЕсли;

	
	МассивСтруктурШлюзов = Неопределено;
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	
	ДатаОтчетаСтрокой = Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ДатаОтчета);
	
	ЗапросОстатков = Новый Запрос;
	ЗапросОстатков.Текст = Mon_Общий.ВернутьТекстЗапросаОстатковПоПартиям();		
	ЗапросОстатков.УстановитьПараметр("ДатаОтчета", 			ДатаОтчета);
	ЗапросОстатков.УстановитьПараметр("ТЗ", 					ТЗСтруктурШлюзов);
	ЗапросОстатков.УстановитьПараметр("ДатаОтчетаСтрокой", 	ДатаОтчетаСтрокой);
	ВыборкаПоОрганизациям = ЗапросОстатков.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		XML = Новый ЗаписьXML;
		
		XML.УстановитьСтроку("windows-1251");
		//XML.ЗаписатьОбъявлениеXML();
		ЗаписатьВXMLЗаголовкиИзЗапросаОстатковПоПартиям(XML, ВыборкаПоОрганизациям);
		
		СтруктураШлюзовДляОтправки = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		
 		ВыборкаПоСкладам =  ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			ВыборкаПоТоварам = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоТоварам.Следующий() Цикл
				
				Если ВыборкаПоТоварам.ВНаличииОстаток < 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписатьВXMLИнформациюПоТоварамСкладамИзЗапросаОстатковПоПартиям(XML, ВыборкаПоТоварам);
				
			КонецЦикла;
			
		КонецЦикла;
		
		XML.ЗаписатьКонецЭлемента(); //d
		XML.ЗаписатьКонецЭлемента(); //o
		XML.ЗаписатьКонецЭлемента(); //data
		XML.ЗаписатьКонецЭлемента(); //scheme	
		XML.ЗаписатьКонецЭлемента(); //extdata

		СтрXML = XML.Закрыть();
			
		ЗаполнитьЗначенияСвойств(СтруктураШлюзовДляОтправки, ВыборкаПоОрганизациям);
		
		СтруктураШлюзовДляОтправки.ТекстОбмена = СтрXML;
		
		МассивСтруктурШлюзовДляОтправки.Добавить(СтруктураШлюзовДляОтправки);
		
	КонецЦикла;
				
	ЗаписатьМассивСтрокВРегистрИсходящиеДанные(МассивСтруктурШлюзовДляОтправки);
	
КонецПроцедуры

Процедура ЗаписатьВXMLЗаголовкиИзЗапросаОстатковПоПартиям(XML, ВыборкаПоОрганизациям)
	
	XML.ЗаписатьНачалоЭлемента("extdata");
	XML.ЗаписатьАтрибут("user", ВыборкаПоОрганизациям.Шлюз);
	XML.ЗаписатьАтрибут("password", ВыборкаПоОрганизациям.Пароль);
	XML.ЗаписатьНачалоЭлемента("scheme");
	XML.ЗаписатьАтрибут("name", "CRMWhBalanceExParts");
	XML.ЗаписатьАтрибут("request", "set");

	XML.ЗаписатьНачалоЭлемента("data");
	
	XML.ЗаписатьНачалоЭлемента("s");
	
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMWhBalanceParam" );
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "SkipDelete", "Integer");
		XML.ЗаписатьКонецЭлемента();
		
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMWhBalanceParts" );	
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "WareHouseId", 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentDate", 	"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "PartNumber", 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ProductionDate",	"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ExpirationDate", 	"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "WareId", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "UnitId", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "Quantity", 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "QuantityR", 		"String");
		XML.ЗаписатьКонецЭлемента(); //d	
	XML.ЗаписатьКонецЭлемента(); //s
	
	
	XML.ЗаписатьНачалоЭлемента("o");
		XML.ЗаписатьНачалоЭлемента("d");
		XML.ЗаписатьАтрибут( "name", "CRMWhBalanceParam" );
			XML.ЗаписатьНачалоЭлемента("r");
				ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоОрганизациям.ФлагУдаления);	
			XML.ЗаписатьКонецЭлемента();//r
		XML.ЗаписатьКонецЭлемента();//d	
	    XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMWhBalanceParts" );
		
КонецПроцедуры

Процедура ЗаписатьВXMLИнформациюПоТоварамСкладамИзЗапросаОстатковПоПартиям(XML, ВыборкаПоТоварам)
	
	XML.ЗаписатьНачалоЭлемента("r");

		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоТоварам.КодСклада);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоТоварам.ДатаОтчетаСтрокой);

		ЗаписатьВXMLСтрокуСТекст(XML, "f", Формат(ВыборкаПоТоварам.СерияДатаПроизводства,"ДФ=ddMMyy") + ВыборкаПоТоварам.НоменклатураМонолит);
		
		ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ВыборкаПоТоварам.СерияДатаПроизводства));
		ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ВыборкаПоТоварам.СерияГоденДо));

		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоТоварам.НоменклатураМонолит);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоТоварам.УпаковкаМонолит);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ФОРМАТ(ВыборкаПоТоварам.ВНаличииОстаток, "ЧГ="));
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ФОРМАТ(ВыборкаПоТоварам.ВНаличииОстаток, "ЧГ="));
		
	XML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЗапросаДвижений

Процедура ЗаписьЗапросаДвиженийВРегистрПоВсемАктивнымШлюзам() Экспорт
	
	Параметры 			 	= Новый Массив;
	МассивСтруктурШлюзов 	= Новый Массив;
	Запрос 					= Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаАктуальныеШлюзы();
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоШлюзовВПакете = 7;
	
	НомерШлюза = 1;
	
	ОбщееКоличествоШлюзов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктурыШлюзов = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		ЗаполнитьЗначенияСвойств(СтруктурыШлюзов, Выборка);
		СтруктурыШлюзов.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMDespatchEx;
		
		МассивСтруктурШлюзов.Добавить(СтруктурыШлюзов);
		
		Если (НомерШлюза <> 1 И КоличествоШлюзовВПакете % НомерШлюза = 0) ИЛИ НомерШлюза = ОбщееКоличествоШлюзов Тогда			
			
			ВыполнитьЗаписьЗапросаДвиженийВРегистрФоном(МассивСтруктурШлюзов);
			
			
			Параметры.Добавить(МассивСтруктурШлюзов);
			//ФоновыеЗадания.Выполнить("Mon_ЗаписьВРегистр.ВыполнитьЗаписьЗапросаДвиженийВРегистрФоном", 
        	//	Параметры, Новый УникальныйИдентификатор, "Фоновое выполнение СRMMonolit");	
				
			Параметры.Очистить();
				
		КонецЕсли;
		
		НомерШлюза = НомерШлюза + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьЗапросаДвиженийВРегистрФоном(МассивСтруктурШлюзов) Экспорт
	
	МассивСтруктурШлюзовДляОтправки 					= Новый Массив;
	МассивСтруктурШлюзовДляПромежуточногоСбораПоШлюзам 	= Новый Массив;
	
	Запрос = Новый Запрос;

	ТЗСтруктурШлюзов = ВернутьТаблицуЗначенийПоМассивуСтруктурШлюзов(МассивСтруктурШлюзов);			
	
	Если МассивСтруктурШлюзов.Количество() > 0 И НЕ МассивСтруктурШлюзов[0].ДатаОтчета = '00010101' Тогда 
		ДатаОтчета = НачалоДня(МассивСтруктурШлюзов[0].ДатаОтчета);
	Иначе
		ДатаОтчета = НачалоДня(ТекущаяДата());		
	КонецЕсли;
	
	МассивСтруктурШлюзов = Неопределено;
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	

	
	ДатаОтчетаСтрокой = Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ДатаОтчета);
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаДвижений();
	
	Запрос.УстановитьПараметр("ДатаОтчета", 		ДатаОтчета);
	Запрос.УстановитьПараметр("ТЗ", 				ТЗСтруктурШлюзов);
	Запрос.УстановитьПараметр("ДатаОтчетаСтрокой", 	ДатаОтчетаСтрокой);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВГраница = РезультатЗапроса.ВГраница();
	ВыборкаПоШлюзамДокументам 	= РезультатЗапроса[ВГраница-2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоШлюзамПартиям  	= РезультатЗапроса[ВГраница-1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоШлюзамПартнерам  	= РезультатЗапроса[ВГраница].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Пока ВыборкаПоШлюзамДокументам.Следующий() Цикл
		
		СтруктураДляФормированияДанных = Mon_Общий.ЗаполнитьСтруктуруДляДвижений();
		ЗаполнитьЗначенияСвойств(СтруктураДляФормированияДанных, ВыборкаПоШлюзамДокументам);
		СтруктураДляФормированияДанных.ДатаОтчета 			= ДатаОтчета;
		СтруктураДляФормированияДанных.ДатаОтчетаСтрокой 	= ДатаОтчетаСтрокой;
		
		СтруктураДляФормированияДанных.ВыборкаПоШлюзамДокументам = ВыборкаПоШлюзамДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		МассивСтруктурШлюзовДляПромежуточногоСбораПоШлюзам.Добавить(СтруктураДляФормированияДанных);
	
	КонецЦикла;
	
	
	Пока ВыборкаПоШлюзамПартиям.Следующий() Цикл
		
		НайденныйИндексСтруктуры = Mon_Общий.НайтиИндексСтруктурыИзМассива(МассивСтруктурШлюзовДляПромежуточногоСбораПоШлюзам, ВыборкаПоШлюзамПартиям.ШлюзОрганизации);		
		НайденнаяСтруктура = МассивСтруктурШлюзовДляПромежуточногоСбораПоШлюзам[НайденныйИндексСтруктуры];
		НайденнаяСтруктура.ВыборкаПоШлюзамПартиям = ВыборкаПоШлюзамПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецЦикла;
	
	
	Пока ВыборкаПоШлюзамПартнерам.Следующий() Цикл
		
		НайденныйИндексСтруктуры = Mon_Общий.НайтиИндексСтруктурыИзМассива(МассивСтруктурШлюзовДляПромежуточногоСбораПоШлюзам, ВыборкаПоШлюзамПартнерам.ШлюзОрганизации);		
		НайденнаяСтруктура = МассивСтруктурШлюзовДляПромежуточногоСбораПоШлюзам[НайденныйИндексСтруктуры];
		НайденнаяСтруктура.ВыборкаПоШлюзамПартнерам = ВыборкаПоШлюзамПартнерам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецЦикла;
	
	РезультатЗапроса			= Неопределено;	
	ВыборкаПоШлюзамДокументам 	= Неопределено;
	ВыборкаПоШлюзамПартиям 		= Неопределено;
	ВыборкаПоШлюзамПартнерам 	= Неопределено;
	
	Для Каждого СтруктураШлюза Из МассивСтруктурШлюзовДляПромежуточногоСбораПоШлюзам Цикл
		
		СтруктураШлюзовДляОтправки = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		
		XML = Новый ЗаписьXML;
		
		XML.УстановитьСтроку("windows-1251");
		
		ЗаписатьВXMLЗаголовкиИзЗапросаДвижений(XML, СтруктураШлюза);
		
		//*-Объявление переменных 
		ПрошлаяПартия = Неопределено;
		
		ОстатокОбщемуКоличествуНоменклатуры = Неопределено;
		ОстатокПоТекущейЦене 				= Неопределено;
		ОстатокПоТекущейПартии 				= Неопределено;
		МассивИсключенныхЦен				= Новый Массив;
		
		ВыборкаПоСериямИТоварамИзДокумента = СтруктураШлюза.ВыборкаПоШлюзамДокументам;
		
		Пока ВыборкаПоСериямИТоварамИзДокумента.Следующий() Цикл
			
			СтруктураСтрокиДляЗаписи 			= Mon_Общий.ЗаполнитьСтруктуруСтрокиДляЗаписи();
			
			//*-Простая запись, когда общее количество номенклатуры в сериях и количество в товарах совпадает
			Если ВыборкаПоСериямИТоварамИзДокумента.ОбщееКоличествоНоменклатуры = 
				ВыборкаПоСериямИТоварамИзДокумента.КоличествоИзТовары
				И ВыборкаПоСериямИТоварамИзДокумента.ОбщееКоличествоНоменклатуры = 
				ВыборкаПоСериямИТоварамИзДокумента.КоличествоИзСерии Тогда
				//*- Это простая запись никакой зауми...
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиДляЗаписи, ВыборкаПоСериямИТоварамИзДокумента);
				//все равно собирать структуру для заполнения строки
				//взять все из строки и ебись оно все конем
				СтруктураСтрокиДляЗаписи.Количество = Окр(ВыборкаПоСериямИТоварамИзДокумента.КоличествоИзСерии * ?(СтруктураСтрокиДляЗаписи.УпаковкаМонолит = "l", 0.03333333333, 1),4);
				СтруктураСтрокиДляЗаписи.Цена = ?(ЗначениеЗаполнено(ВыборкаПоСериямИТоварамИзДокумента.Цена), Окр(ВыборкаПоСериямИТоварамИзДокумента.Цена / ?(СтруктураСтрокиДляЗаписи.УпаковкаМонолит = "l", 0.03333333333, 1), 2), "");
				
				ЗаписатьВXMLИнформациюПоСериямИТоварамИзДокумента(XML, СтруктураСтрокиДляЗаписи);

				//*-На всякий случай очистим.
				ОстатокОбщемуКоличествуНоменклатуры = Неопределено;			
				Продолжить;
				
			КонецЕсли;			
			
			//инициализация в цикле до всех условий И банального случая, когда одна строка и в товарах и сериях
			Если ОстатокОбщемуКоличествуНоменклатуры = Неопределено Тогда
								
				ОстатокОбщемуКоличествуНоменклатуры = ВыборкаПоСериямИТоварамИзДокумента.ОбщееКоличествоНоменклатуры;
				ОстатокПоТекущейЦене 				= ВыборкаПоСериямИТоварамИзДокумента.КоличествоИзТовары;
				ОстатокПоТекущейПартии 				= ВыборкаПоСериямИТоварамИзДокумента.КоличествоИзСерии;

				МассивИсключенныхЦен.Очистить();
				СохранитьПрошлуюЦену = Ложь;
				
			КонецЕсли;						
			
			//при первом входе прошлаяпартия неопределена, а остаток по партии будет неопределено, тогда мы попадаем в цикл
			//Если ОстатокПоТекущейПартии = 0, то текущую серию нам надо пропускать.
			Если ВыборкаПоСериямИТоварамИзДокумента.Серия = ПрошлаяПартия И ОстатокПоТекущейПартии = 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			//переопределяем количество, когда это реально новая партия, а так работаем со старым объемом
			Если ВыборкаПоСериямИТоварамИзДокумента.Серия <> ПрошлаяПартия Тогда
				
				ОстатокПоТекущейПартии 	= ВыборкаПоСериямИТоварамИзДокумента.КоличествоИзСерии;
				ПрошлаяПартия 			= ВыборкаПоСериямИТоварамИзДокумента.Серия;
				
			КонецЕсли;
			
			//Если мы перешли на новую партию, но в ней надо исключить исчерпавшие себя цены
			Если МассивИсключенныхЦен.Найти(ВыборкаПоСериямИТоварамИзДокумента.НомерСтрокиЦена) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			//Инициализируем полностью структуру
			
			ЗаполнитьЗначенияСвойств(СтруктураСтрокиДляЗаписи, ВыборкаПоСериямИТоварамИзДокумента);
				
			Если НЕ СохранитьПрошлуюЦену Тогда
				ОстатокПоТекущейЦене= ВыборкаПоСериямИТоварамИзДокумента.КоличествоИзТовары;
				ЦенаПодЗапись 		= ВыборкаПоСериямИТоварамИзДокумента.Цена;
				КодАкцииПодЗапись 	= ВыборкаПоСериямИТоварамИзДокумента.КодАкции;
				//*-Собирать все требуемые атрибуты здесь
	
			КонецЕсли;
			
			РасчетныйОбъемПодЗапись = Мин(ОстатокПоТекущейПартии, ОстатокПоТекущейЦене);
			
			ОстатокПоТекущейПартии = ОстатокПоТекущейПартии - РасчетныйОбъемПодЗапись;
			ОстатокПоТекущейЦене   = ОстатокПоТекущейЦене   - РасчетныйОбъемПодЗапись;
					
			СтруктураСтрокиДляЗаписи.Количество = Окр(РасчетныйОбъемПодЗапись * ?(СтруктураСтрокиДляЗаписи.УпаковкаМонолит = "l", 0.03333333333, 1),4);			
			
						
			Если ОстатокПоТекущейПартии = 0 И ОстатокПоТекущейЦене <> 0 тогда	
				//Весь объем записываем с ценой из строки 						
			Иначе
				
				//Записываем все по старой цене!!!!
				СтруктураСтрокиДляЗаписи.Цена 		= ЦенаПодЗапись;
				СтруктураСтрокиДляЗаписи.КодАкции 	= КодАкцииПодЗапись;
																
			КонецЕсли;
			
			//*-преобразовываем цену под кеги...Очень плохо, что это не проверили сразу.
			
			СтруктураСтрокиДляЗаписи.Цена = ?(ЗначениеЗаполнено(СтруктураСтрокиДляЗаписи.Цена), Окр(СтруктураСтрокиДляЗаписи.Цена / ?(СтруктураСтрокиДляЗаписи.УпаковкаМонолит = "l", 0.03333333333, 1),4),"");
			
			ЗаписатьВXMLИнформациюПоСериямИТоварамИзДокумента(XML, СтруктураСтрокиДляЗаписи);
			
			Если ОстатокПоТекущейЦене = 0 Тогда 				
				СохранитьПрошлуюЦену = Ложь;
				//Данная Цена себя исчерпала, включае ее в массив исключенных 
				МассивИсключенныхЦен.Добавить(ВыборкаПоСериямИТоварамИзДокумента.НомерСтрокиЦена);
			Иначе
				СохранитьПрошлуюЦену = Истина;
			КонецЕсли;
			
			ОстатокОбщемуКоличествуНоменклатуры = ОстатокОбщемуКоличествуНоменклатуры - РасчетныйОбъемПодЗапись;
			
			//*-фееричный конец обнуления для новой строки
			Если ОстатокОбщемуКоличествуНоменклатуры = 0 Тогда
				
				ОстатокОбщемуКоличествуНоменклатуры = Неопределено;
				ОстатокПоТекущейЦене 				= Неопределено;
				ОстатокПоТекущейПартии	            = Неопределено;
				МассивИсключенныхЦен.Очистить();
				
			КонецЕсли;			
			
		КонецЦикла;
		
		XML.ЗаписатьКонецЭлемента(); //d
		
		ВыборкаПоШлюзамПартнерам = СтруктураШлюза.ВыборкаПоШлюзамПартнерам;
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMClientAddress" );
			
			Если НЕ ВыборкаПоШлюзамПартнерам = Неопределено Тогда
			
				Пока ВыборкаПоШлюзамПартнерам.Следующий() Цикл
					
					ЗаписатьВXMLИнформациюПоПартнерамИзДокументов(XML, ВыборкаПоШлюзамПартнерам);	
					
				КонецЦикла;
				
			КонецЕсли;
			
		XML.ЗаписатьКонецЭлемента(); //d
		
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMDespatchParts" );
			ВыборкаПоШлюзамПартиям = СтруктураШлюза.ВыборкаПоШлюзамПартиям;
			
			Если НЕ ВыборкаПоШлюзамПартиям = Неопределено Тогда
			
				Пока ВыборкаПоШлюзамПартиям.Следующий() Цикл
					
					ЗаписатьВXMLИнформациюПоПартиямИзДокументов(XML, ВыборкаПоШлюзамПартиям);	
					
				КонецЦикла;
			
			КонецЕсли;

		XML.ЗаписатьКонецЭлемента(); //d

		XML.ЗаписатьКонецЭлемента(); //o
		XML.ЗаписатьКонецЭлемента(); //data
		XML.ЗаписатьКонецЭлемента(); //scheme	
		XML.ЗаписатьКонецЭлемента(); //extdata

		СтрXML = XML.Закрыть();
		
		ЗаполнитьЗначенияСвойств(СтруктураШлюзовДляОтправки, СтруктураШлюза);
				
		СтруктураШлюзовДляОтправки.ТекстОбмена = СтрXML;
		
		МассивСтруктурШлюзовДляОтправки.Добавить(СтруктураШлюзовДляОтправки);
		
	КонецЦикла;
	
	ЗаписатьМассивСтрокВРегистрИсходящиеДанные(МассивСтруктурШлюзовДляОтправки);
					
КонецПроцедуры

Процедура ЗаписатьВXMLЗаголовкиИзЗапросаДвижений(XML, СтруктураДляЗаполнения)
	
	XML.ЗаписатьНачалоЭлемента("extdata");
	XML.ЗаписатьАтрибут("user", 	СтруктураДляЗаполнения.Шлюз);
	XML.ЗаписатьАтрибут("password", СтруктураДляЗаполнения.Пароль);
	XML.ЗаписатьНачалоЭлемента("scheme");
	XML.ЗаписатьАтрибут("name", "CRMDespatchEx");
	XML.ЗаписатьАтрибут("request", "set");

	XML.ЗаписатьНачалоЭлемента("data");
	
	XML.ЗаписатьНачалоЭлемента("s");
	
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMDespatchParam" );
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "WorkDate",   				"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "SkipDelete", 				"Integer");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "IsSupplyConvertClients", 	"Integer");
		XML.ЗаписатьКонецЭлемента();
		
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMDespatch" );	
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CompanyId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "AddressId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "AddressRegionType",	 	"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "SaleChannel", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CRMOrderNumber", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CRMOrderDate", 			"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentTypeId",	 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentNumber", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentDate", 			"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "SrcCRMDbId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "PayDate",	 				"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "RejectReasonCode", 		"Integer");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "WareHouseId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "WareId", 					"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "Price",	 				"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "Quantity", 				"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ActionDate", 				"Date");		
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CRMPromoType", 			"String");			
		XML.ЗаписатьКонецЭлемента(); //d
		
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMClientAddress" );	
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CRMClientId", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CompanyId", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CompanyName",	 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "AddressId",	 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "AddressName", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "Location", 			"String");
		XML.ЗаписатьКонецЭлемента(); //d
		
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMDespatchParts" );	
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentDate", 		"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentNumber",	 	"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentTypeId", 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "WareId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "PartNumber", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ProductionDate", 		"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ExpirationDate", 		"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "Quantity",	 			"Currency");
		XML.ЗаписатьКонецЭлемента(); //d
		
	XML.ЗаписатьКонецЭлемента(); //s
	
	
	XML.ЗаписатьНачалоЭлемента("o");
		XML.ЗаписатьНачалоЭлемента("d");
		XML.ЗаписатьАтрибут("name", "CRMDespatchParam");
			XML.ЗаписатьНачалоЭлемента("r");
				ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураДляЗаполнения.ДатаОтчетаСтрокой);
				ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураДляЗаполнения.ФлагУдаления);
				ЗаписатьВXMLСтрокуСТекст(XML, "f", "1");
			XML.ЗаписатьКонецЭлемента();//r
		XML.ЗаписатьКонецЭлемента();//d	
	    XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMDespatch" );
		
КонецПроцедуры

Процедура ЗаписатьВXMLИнформациюПоСериямИТоварамИзДокумента(XML, СтруктураСтрокиДляЗаписи)

	XML.ЗаписатьНачалоЭлемента("r");
	
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.КонтрагентИНН);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.ПартнерКод);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.РегионПродаж);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.КаналПродаж);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.ЗаказКлиентаНомерПоДаннымКлиента);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(СтруктураСтрокиДляЗаписи.ЗаказКлиентаДатаПоДаннымКлиента));	
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.НазваниеДокумента);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.РегистраторНомер);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(НачалоДня(СтруктураСтрокиДляЗаписи.Период)));	
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.SrcCRMDbId);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ""); //PayDate
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ""); //RejectReasonCode	
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.КодСклада); 
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.НоменклатураМонолит);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", Формат(СтруктураСтрокиДляЗаписи.Цена, "ЧДЦ=2; ЧРД=.; ЧГ="));
		ЗаписатьВXMLСтрокуСТекст(XML, "f", Формат(СтруктураСтрокиДляЗаписи.Количество, "ЧДЦ=4; ЧРД=.; ЧГ="));
		ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(НачалоДня(СтруктураСтрокиДляЗаписи.Период)));
		ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.КодАкции);

	XML.ЗаписатьКонецЭлемента();//r
	
КонецПроцедуры
	
Процедура ЗаписатьВXMLИнформациюПоПартиямИзДокументов(XML, СтруктураСтрокиДляЗаписи)

	XML.ЗаписатьНачалоЭлемента("r");
	
	ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(НачалоДня(СтруктураСтрокиДляЗаписи.Период)));
	ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.РегистраторНомер);
	ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.НазваниеДокумента);
	ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.НоменклатураМонолит);
	ЗаписатьВXMLСтрокуСТекст(XML, "f", Формат(СтруктураСтрокиДляЗаписи.СерияДатаПроизводства,"ДФ=ddMMyy") + СтруктураСтрокиДляЗаписи.НоменклатураМонолит);
	ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(СтруктураСтрокиДляЗаписи.СерияДатаПроизводства));
	ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(СтруктураСтрокиДляЗаписи.СерияГоденДо));
	ЗаписатьВXMLСтрокуСТекст(XML, "f", Формат(Окр(СтруктураСтрокиДляЗаписи.КоличествоИзСерии * ?(СтруктураСтрокиДляЗаписи.УпаковкаМонолит = "l", 0.03333333333, 1),4), "ЧДЦ=4; ЧРД=.; ЧГ="));
	
	
	XML.ЗаписатьКонецЭлемента();//r
	
КонецПроцедуры

Процедура ЗаписатьВXMLИнформациюПоПартнерамИзДокументов(XML, СтруктураСтрокиДляЗаписи)

	XML.ЗаписатьНачалоЭлемента("r");
	ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.КодТорговойТочки);
	ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.КонтрагентИНН);
	ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.Контрагент);
	ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.ПартнерКод);
	ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.Партнер);
	ЗаписатьВXMLСтрокуСТекст(XML, "f", СтруктураСтрокиДляЗаписи.АдресДоставки);	
	XML.ЗаписатьКонецЭлемента();//r
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЗапросаПричинНедопоставки

Процедура ЗаписьЗапросаПричинНедопоставкиВРегистрПоВсемАктивнымШлюзам() Экспорт
	
	Параметры 			 	= Новый Массив;
	МассивСтруктурШлюзов 	= Новый Массив;
	Запрос 					= Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаАктуальныеШлюзы();
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоШлюзовВПакете = 7;
	
	НомерШлюза = 1;
	
	ОбщееКоличествоШлюзов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктурыШлюзов = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		ЗаполнитьЗначенияСвойств(СтруктурыШлюзов, Выборка);
		СтруктурыШлюзов.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMOrdRspEx;
		
		МассивСтруктурШлюзов.Добавить(СтруктурыШлюзов);
		
		Если (НомерШлюза <> 1 И КоличествоШлюзовВПакете % НомерШлюза = 0) ИЛИ НомерШлюза = ОбщееКоличествоШлюзов Тогда			
			ВыполнитьЗаписьЗапросаПричинНедопоставкиВРегистрФоном(МассивСтруктурШлюзов);
			//Параметры.Добавить(МассивСтруктурШлюзов);
			//ФоновыеЗадания.Выполнить("Mon_ЗаписьВРегистр.ВыполнитьЗаписьЗапросаПричинНедопоставкиВРегистрФоном", 
			//	Параметры, Новый УникальныйИдентификатор, "Фоновое выполнение СRMMonolit");	
				
			Параметры.Очистить();
				
		КонецЕсли;
		
		НомерШлюза = НомерШлюза + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьЗапросаПричинНедопоставкиВРегистрФоном(МассивСтруктурШлюзов) Экспорт
	
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	Запрос = Новый Запрос;

	ТЗСтруктурШлюзов = ВернутьТаблицуЗначенийПоМассивуСтруктурШлюзов(МассивСтруктурШлюзов);			
	
	Если МассивСтруктурШлюзов.Количество() > 0 И НЕ МассивСтруктурШлюзов[0].ДатаОтчета = '00010101' Тогда 
		ДатаОтчета = НачалоДня(МассивСтруктурШлюзов[0].ДатаОтчета);
	Иначе
		ДатаОтчета = НачалоДня(ТекущаяДата()) + 86400;		
	КонецЕсли;
	
	
	МассивСтруктурШлюзов = Неопределено;
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	
	ДатаОтчетаСтрокой = Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ДатаОтчета);	
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаПричинНедопоставки();
			
	Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
	Запрос.УстановитьПараметр("ТЗ",         ТЗСтруктурШлюзов);
	Запрос.УстановитьПараметр("ДатаОтчетаСтрокой", ДатаОтчетаСтрокой);
	ВыборкаПоШлюзам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоШлюзам.Следующий() Цикл
		
		СтруктураШлюзовДляОтправки = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		
		XML = Новый ЗаписьXML;
		
		XML.УстановитьСтроку("windows-1251");
		//XML.ЗаписатьОбъявлениеXML();
		
		ЗаписатьВXMLЗаголовкиИзЗапросаПричинНедопоставки(XML, ВыборкаПоШлюзам);
			
 		ВыборкаПоДокументам =  ВыборкаПоШлюзам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			ЗаписатьВXMLИнформациюПоДокументуИзЗапросаПричинНедопоставки(XML, ВыборкаПоДокументам);
			
		КонецЦикла;
		
		XML.ЗаписатьКонецЭлемента(); //d
		XML.ЗаписатьКонецЭлемента(); //o
		XML.ЗаписатьКонецЭлемента(); //data
		XML.ЗаписатьКонецЭлемента(); //scheme	
		XML.ЗаписатьКонецЭлемента(); //extdata

		СтрXML = XML.Закрыть();
		
		ЗаполнитьЗначенияСвойств(СтруктураШлюзовДляОтправки, ВыборкаПоШлюзам);
		
		СтруктураШлюзовДляОтправки.ТекстОбмена = СтрXML;
		
		МассивСтруктурШлюзовДляОтправки.Добавить(СтруктураШлюзовДляОтправки);
		
	КонецЦикла;
				
	ЗаписатьМассивСтрокВРегистрИсходящиеДанные(МассивСтруктурШлюзовДляОтправки);
	
КонецПроцедуры

Процедура ЗаписатьВXMLЗаголовкиИзЗапросаПричинНедопоставки(XML, ВыборкаПоОрганизациям)
	
	XML.ЗаписатьНачалоЭлемента("extdata");
	XML.ЗаписатьАтрибут("user", 	ВыборкаПоОрганизациям.Шлюз);
	XML.ЗаписатьАтрибут("password", ВыборкаПоОрганизациям.Пароль);
	XML.ЗаписатьНачалоЭлемента("scheme");
	XML.ЗаписатьАтрибут("name", "CRMOrdRspEx");
	XML.ЗаписатьАтрибут("request", "set");

	XML.ЗаписатьНачалоЭлемента("data");
	
	XML.ЗаписатьНачалоЭлемента("s");
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMDespatchParam" );
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "SkipDelete", 			"Integer");
		XML.ЗаписатьКонецЭлемента();
		
		XML.ЗаписатьНачалоЭлемента("d");
		
			XML.ЗаписатьАтрибут( "name", "CRMDespatch" );	
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CRMOrderNumber", 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CRMOrderDate", 		"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentTypeId",	 	"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ActionDate", 			"Date");			
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "WareId",				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "Quantity",				"Decimal");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "UndersupplyReason",	"Integer");
			
		XML.ЗаписатьКонецЭлемента(); //d	
	XML.ЗаписатьКонецЭлемента(); //s	
	
	XML.ЗаписатьНачалоЭлемента("o");
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут("name", "CRMDespatchParam");
			XML.ЗаписатьНачалоЭлемента("r");
				ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоОрганизациям.ФлагУдаления);
			XML.ЗаписатьКонецЭлемента();//r
		XML.ЗаписатьКонецЭлемента();//d	
	    XML.ЗаписатьНачалоЭлемента("d");
		 	XML.ЗаписатьАтрибут( "name", "CRMDespatch" );
		
КонецПроцедуры

Процедура ЗаписатьВXMLИнформациюПоДокументуИзЗапросаПричинНедопоставки(XML, ВыборкаПоДокументам)
	
	XML.ЗаписатьНачалоЭлемента("r");

	    ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоДокументам.НомерПоДаннымКлиента); //CRMOrderNumber
		ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ВыборкаПоДокументам.ДатаПоДаннымКлиента));    //StatusId
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "Despatch");	 	
		ЗаписатьВXMLСтрокуСТекст(XML, "f", Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ВыборкаПоДокументам.ДатаОтгрузки));  
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоДокументам.НоменклатураАртикул);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоДокументам.РазностьОбъемов);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоДокументам.Причина);
		
	XML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЗапросаСальдоПоТаре

Процедура ЗаписьЗапросаСальдоПоТареВРегистрПоВсемАктивнымШлюзам() Экспорт

	Параметры 			 	= Новый Массив;
	МассивСтруктурШлюзов 	= Новый Массив;
	Запрос 					= Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаАктуальныеШлюзы();
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоШлюзовВПакете = 7;
	
	НомерШлюза = 1;
	
	ОбщееКоличествоШлюзов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктурыШлюзов = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		ЗаполнитьЗначенияСвойств(СтруктурыШлюзов, Выборка);
		СтруктурыШлюзов.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMSaldoEx;
		
		МассивСтруктурШлюзов.Добавить(СтруктурыШлюзов);
		
		Если (НомерШлюза <> 1 И КоличествоШлюзовВПакете % НомерШлюза = 0) ИЛИ НомерШлюза = ОбщееКоличествоШлюзов Тогда			
			
			Параметры.Добавить(МассивСтруктурШлюзов);
			
			ВыполнитьЗаписьЗапросаСальдоПоТареВРегистрФоном(МассивСтруктурШлюзов);
			
			
			//ФоновыеЗадания.Выполнить("Mon_ЗаписьВРегистр.ВыполнитьЗаписьЗапросаСальдоПоТареВРегистрФоном", 
        	//	Параметры, Новый УникальныйИдентификатор, "Фоновое выполнение СRMMonolit");	
				
			Параметры.Очистить();
				
		КонецЕсли;
		
		НомерШлюза = НомерШлюза + 1;
		
	КонецЦикла;

	
КонецПроцедуры

Процедура ВыполнитьЗаписьЗапросаСальдоПоТареВРегистрФоном(МассивСтруктурШлюзов) Экспорт
	
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	Запрос = Новый Запрос;

	ТЗСтруктурШлюзов = ВернутьТаблицуЗначенийПоМассивуСтруктурШлюзов(МассивСтруктурШлюзов);			
	
	Если МассивСтруктурШлюзов.Количество() > 0 И НЕ МассивСтруктурШлюзов[0].ДатаОтчета = '00010101' Тогда 
		ДатаОтчета = НачалоДня(МассивСтруктурШлюзов[0].ДатаОтчета);
	Иначе
		ДатаОтчета = НачалоДня(ТекущаяДата());		
	КонецЕсли;

	
	МассивСтруктурШлюзов = Неопределено;
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	

	ДатаОтчетаСтрокой = Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ДатаОтчета);
		
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаСальдоПоТаре();
			
	Запрос.УстановитьПараметр("ДатаОтчета", 		ДатаОтчета);
	Запрос.УстановитьПараметр("ДатаОтчетаСтрокой", 	ДатаОтчетаСтрокой);
	Запрос.УстановитьПараметр("ТЗ", ТЗСтруктурШлюзов);
	
	
	Результат = Запрос.Выполнить();
	ВыборкаПоШлюзам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоШлюзам.Следующий() Цикл
		
		СтруктураШлюзовДляОтправки = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		
		XML = Новый ЗаписьXML;
		
		XML.УстановитьСтроку("windows-1251");
		//XML.ЗаписатьОбъявлениеXML();
		ЗаписатьВXMLЗаголовкиИзЗапросаСальдоПоТаре(XML, ВыборкаПоШлюзам);
			
 		ВыборкаПоКонтрагентамПартнерам =  ВыборкаПоШлюзам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоКонтрагентамПартнерам.Следующий() Цикл
			
			ЗаписатьВXMLИнформациюПоКонтрагентуПартнеруИзЗапросаСальдоПоТаре(XML, ВыборкаПоКонтрагентамПартнерам);
			
		КонецЦикла;
		
		XML.ЗаписатьКонецЭлемента(); //d
		XML.ЗаписатьКонецЭлемента(); //o
		XML.ЗаписатьКонецЭлемента(); //data
		XML.ЗаписатьКонецЭлемента(); //scheme	
		XML.ЗаписатьКонецЭлемента(); //extdata

		СтрXML = XML.Закрыть();
		
		ЗаполнитьЗначенияСвойств(СтруктураШлюзовДляОтправки, ВыборкаПоШлюзам);
		
		СтруктураШлюзовДляОтправки.ТекстОбмена = СтрXML;
		
		МассивСтруктурШлюзовДляОтправки.Добавить(СтруктураШлюзовДляОтправки);
		
	КонецЦикла;
				
	ЗаписатьМассивСтрокВРегистрИсходящиеДанные(МассивСтруктурШлюзовДляОтправки);
	
КонецПроцедуры

Процедура ЗаписатьВXMLЗаголовкиИзЗапросаСальдоПоТаре(XML, ВыборкаПоШлюзам)
	
	XML.ЗаписатьНачалоЭлемента("extdata");
	XML.ЗаписатьАтрибут("user", 	ВыборкаПоШлюзам.Шлюз);
	XML.ЗаписатьАтрибут("password", ВыборкаПоШлюзам.Пароль);
	XML.ЗаписатьНачалоЭлемента("scheme");
	XML.ЗаписатьАтрибут("name", "CRMSaldoEx");
	XML.ЗаписатьАтрибут("request", "set");

	XML.ЗаписатьНачалоЭлемента("data");
	
	XML.ЗаписатьНачалоЭлемента("s");
	
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMSaldoAggregate" );
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CompanyId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "AddressId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ProductId",	 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ProductName", 				"String");			
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mCreditLimit", 			"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mCustInvoice", 			"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mCustInvoiceAllow", 		"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mCustInvoiceOverdue", 		"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mCustReturn", 				"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mDebtDocBank", 			"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mDebtDocCash", 			"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mDebtDocCopy", 			"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mReturnableDebt", 			"Currency");			
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mVendInvoice", 			"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mVendReturn", 				"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mCredDoc", 				"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mDebtDocCash", 			"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mDebtDocCopy", 			"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "mTotalBalance", 			"Currency");
		XML.ЗаписатьКонецЭлемента();
		
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMSaldoDoc" );
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CompanyId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "AddressId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ProductId",	 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ProductName", 				"String");		
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentNumber", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DocumentDate", 			"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ActionDate",	 			"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "PaymentDate", 				"Date");			
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "OverduePeriod", 			"Integer");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CustInvoiceSumm", 			"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CustReturnSumm", 			"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "PayDocSumm", 				"Currency");
		XML.ЗаписатьКонецЭлемента(); //d
		
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMSaldoWare" );
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "Date", 					"Date");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CompanyId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "AddressId", 				"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "WareId", 					"String");		
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "FACode", 					"String");						
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "Quantity", 				"Currency");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "Summ", 					"Currency");
		XML.ЗаписатьКонецЭлемента(); //d
	XML.ЗаписатьКонецЭлемента(); //s
	
	
	XML.ЗаписатьНачалоЭлемента("o");
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMSaldoAggregate" );
		XML.ЗаписатьКонецЭлемента();
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMSaldoDoc" );
		XML.ЗаписатьКонецЭлемента();
	    XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMSaldoWare");
		
КонецПроцедуры

Процедура ЗаписатьВXMLИнформациюПоКонтрагентуПартнеруИзЗапросаСальдоПоТаре(XML, ВыборкаПоКонтрагентамПартнерам)
	
	XML.ЗаписатьНачалоЭлемента("r");

		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.ДатаОтчетаСтрокой);
		
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.ИНН);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.Код);

		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.НоменклатураМонолит);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "");
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.КоличествоОстаток);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "0");
		
	XML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЗапросаГрафикаДоставки

Процедура ЗаписьЗапросаГрафикаДоставкиВРегистрПоВсемАктивнымШлюзам() Экспорт

	Параметры 			 	= Новый Массив;
	МассивСтруктурШлюзов 	= Новый Массив;
	Запрос 					= Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаАктуальныеШлюзы();
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоШлюзовВПакете = 7;
	
	НомерШлюза = 1;
	
	ОбщееКоличествоШлюзов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктурыШлюзов = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		ЗаполнитьЗначенияСвойств(СтруктурыШлюзов, Выборка);
		СтруктурыШлюзов.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMDeliverySchedule;
		
		МассивСтруктурШлюзов.Добавить(СтруктурыШлюзов);
		
		Если (НомерШлюза <> 1 И КоличествоШлюзовВПакете % НомерШлюза = 0) ИЛИ НомерШлюза = ОбщееКоличествоШлюзов Тогда			
			
			Параметры.Добавить(МассивСтруктурШлюзов);
			
			ВыполнитьЗаписьЗапросаГрафикаДоставкиВРегистрФоном(МассивСтруктурШлюзов);
			
			
			//ФоновыеЗадания.Выполнить("Mon_ЗаписьВРегистр.ВыполнитьЗаписьЗапросаГрафикаДоставкиВРегистрФоном", 
        	//	Параметры, Новый УникальныйИдентификатор, "Фоновое выполнение СRMMonolit");	
				
			Параметры.Очистить();
				
		КонецЕсли;
		
		НомерШлюза = НомерШлюза + 1;
		
	КонецЦикла;

	
КонецПроцедуры

Процедура ВыполнитьЗаписьЗапросаГрафикаДоставкиВРегистрФоном(МассивСтруктурШлюзов) Экспорт
	
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	Запрос = Новый Запрос;

	ТЗСтруктурШлюзов = ВернутьТаблицуЗначенийПоМассивуСтруктурШлюзов(МассивСтруктурШлюзов);			
	
	Если МассивСтруктурШлюзов.Количество() > 0 И НЕ МассивСтруктурШлюзов[0].ДатаОтчета = '00010101' Тогда 
		ДатаОтчета = КонецНедели(МассивСтруктурШлюзов[0].ДатаОтчета) + 1;
	Иначе
		ДатаОтчета = КонецНедели(ТекущаяДата()) + 1;		
	КонецЕсли;

	
	МассивСтруктурШлюзов = Неопределено;
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	

	ДатаОтчетаСтрокой = Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ДатаОтчета);
		
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаГрафикаДоставки();
			
	Запрос.УстановитьПараметр("ДатаОтчета", 		ДатаОтчета);
	Запрос.УстановитьПараметр("ДатаОтчетаСтрокой", 	ДатаОтчетаСтрокой);
	Запрос.УстановитьПараметр("ТЗ", ТЗСтруктурШлюзов);
	
	
	Результат = Запрос.Выполнить();
	ВыборкаПоШлюзам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоШлюзам.Следующий() Цикл
		
		СтруктураШлюзовДляОтправки = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		
		XML = Новый ЗаписьXML;
		
		XML.УстановитьСтроку("windows-1251");
		//XML.ЗаписатьОбъявлениеXML();
		ЗаписатьВXMLЗаголовкиИзЗапросаГрафикаДоставки(XML, ВыборкаПоШлюзам);
			
 		ВыборкаПоКонтрагентамПартнерам =  ВыборкаПоШлюзам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоКонтрагентамПартнерам.Следующий() Цикл
			
			ЗаписатьВXMLИнформациюПоКонтрагентуПартнеруИзЗапросаГрафикаДоставки(XML, ВыборкаПоКонтрагентамПартнерам);
			
		КонецЦикла;
		
		XML.ЗаписатьКонецЭлемента(); //d
		XML.ЗаписатьКонецЭлемента(); //o
		XML.ЗаписатьКонецЭлемента(); //data
		XML.ЗаписатьКонецЭлемента(); //scheme	
		XML.ЗаписатьКонецЭлемента(); //extdata

		СтрXML = XML.Закрыть();
		
		ЗаполнитьЗначенияСвойств(СтруктураШлюзовДляОтправки, ВыборкаПоШлюзам);
		
		СтруктураШлюзовДляОтправки.ТекстОбмена = СтрXML;
		
		МассивСтруктурШлюзовДляОтправки.Добавить(СтруктураШлюзовДляОтправки);
		
	КонецЦикла;
				
	ЗаписатьМассивСтрокВРегистрИсходящиеДанные(МассивСтруктурШлюзовДляОтправки);
	
КонецПроцедуры

Процедура ЗаписатьВXMLЗаголовкиИзЗапросаГрафикаДоставки(XML, ВыборкаПоШлюзам)
	
	XML.ЗаписатьНачалоЭлемента("extdata");
	XML.ЗаписатьАтрибут("user", 	ВыборкаПоШлюзам.Шлюз);
	XML.ЗаписатьАтрибут("password", ВыборкаПоШлюзам.Пароль);
	XML.ЗаписатьНачалоЭлемента("scheme");
	XML.ЗаписатьАтрибут("name", "CRMDeliveryScheduleEx");
	XML.ЗаписатьАтрибут("request", "set");

	XML.ЗаписатьНачалоЭлемента("data");
	
	XML.ЗаписатьНачалоЭлемента("s");
	
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMDeliverySchedule" );
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "ClientAddressId", 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CompanyId", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "AddressId",	 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "BeginDate", 			"Date");			
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "TareType", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DeliveryDay1", 		"Integer");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DeliveryDay2", 		"Integer");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DeliveryDay3", 		"Integer");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DeliveryDay4", 		"Integer");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DeliveryDay5", 		"Integer");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DeliveryDay6", 		"Integer");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "DeliveryDay7", 		"Integer");
		XML.ЗаписатьКонецЭлемента();
		
	XML.ЗаписатьКонецЭлемента(); //s
	
	XML.ЗаписатьНачалоЭлемента("o");
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMDeliverySchedule" );		
КонецПроцедуры

Процедура ЗаписатьВXMLИнформациюПоКонтрагентуПартнеруИзЗапросаГрафикаДоставки(XML, ВыборкаПоКонтрагентамПартнерам)
	
	XML.ЗаписатьНачалоЭлемента("r");

		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.КодТорговойТочки);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.КонтрагентИНН);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.ПартнерКод);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.ДатаОтчетаСтрокой);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "");
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "1");
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "1");
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "1");
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "1");
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "1");
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "1");
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "1");
		
	XML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЗапросаСпискаБлокированныхКлиентов

Процедура ЗаписьЗапросаСпискаБлокированныхКлиентовВРегистрПоВсемАктивнымШлюзам() Экспорт

	Параметры 			 	= Новый Массив;
	МассивСтруктурШлюзов 	= Новый Массив;
	Запрос 					= Новый Запрос;
	
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаНаАктуальныеШлюзы();
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоШлюзовВПакете = 7;
	
	НомерШлюза = 1;
	
	ОбщееКоличествоШлюзов = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктурыШлюзов = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		ЗаполнитьЗначенияСвойств(СтруктурыШлюзов, Выборка);
		СтруктурыШлюзов.ВидОбмена = Перечисления.Mon_ВидыОбменов.CRMClientAddressBanEx;
		
		МассивСтруктурШлюзов.Добавить(СтруктурыШлюзов);
		
		Если (НомерШлюза <> 1 И КоличествоШлюзовВПакете % НомерШлюза = 0) ИЛИ НомерШлюза = ОбщееКоличествоШлюзов Тогда			
			
			Параметры.Добавить(МассивСтруктурШлюзов);
			
			ВыполнитьЗаписьЗапросаСпискаБлокированныхКлиентовВРегистрФоном(МассивСтруктурШлюзов);
			
			
			//ФоновыеЗадания.Выполнить("Mon_ЗаписьВРегистр.ВыполнитьЗаписьЗапросаСпискаБлокированныхКлиентовВРегистрФоном", 
        	//	Параметры, Новый УникальныйИдентификатор, "Фоновое выполнение СRMMonolit");	
				
			Параметры.Очистить();
				
		КонецЕсли;
		
		НомерШлюза = НомерШлюза + 1;
		
	КонецЦикла;

	
КонецПроцедуры

Процедура ВыполнитьЗаписьЗапросаСпискаБлокированныхКлиентовВРегистрФоном(МассивСтруктурШлюзов) Экспорт
	
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	Запрос = Новый Запрос;

	ТЗСтруктурШлюзов = ВернутьТаблицуЗначенийПоМассивуСтруктурШлюзов(МассивСтруктурШлюзов);			
	
	Если МассивСтруктурШлюзов.Количество() > 0 И НЕ МассивСтруктурШлюзов[0].ДатаОтчета = '00010101' Тогда 
		ДатаОтчета = КонецДня(МассивСтруктурШлюзов[0].ДатаОтчета) + 1;
	Иначе
		ДатаОтчета = КонецДня(ТекущаяДата()) + 1;		
	КонецЕсли;

	
	МассивСтруктурШлюзов = Неопределено;
	МассивСтруктурШлюзовДляОтправки = Новый Массив;
	

	ДатаОтчетаСтрокой = Mon_Общий.ВернутьДатуСтрокойВФорматеXML(ДатаОтчета);
		
	Запрос.Текст = Mon_Общий.ВернутьТекстЗапросаСпискаБлокированныхКлиентов();
			
	Запрос.УстановитьПараметр("ДатаОтчета", 		ДатаОтчета);
	Запрос.УстановитьПараметр("ДатаОтчетаСтрокой", 	ДатаОтчетаСтрокой);
	Запрос.УстановитьПараметр("ТЗ", ТЗСтруктурШлюзов);
	
	
	Результат = Запрос.Выполнить();
	ВыборкаПоШлюзам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоШлюзам.Следующий() Цикл
		
		СтруктураШлюзовДляОтправки = Mon_Общий.ЗаполнитьПараметрыСтруктурШлюзов();
		
		XML = Новый ЗаписьXML;
		
		XML.УстановитьСтроку("windows-1251");
		//XML.ЗаписатьОбъявлениеXML();
		ЗаписатьВXMLЗаголовкиИзЗапросаСпискаБлокированныхКлиентов(XML, ВыборкаПоШлюзам);
			
 		ВыборкаПоКонтрагентамПартнерам =  ВыборкаПоШлюзам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоКонтрагентамПартнерам.Следующий() Цикл
			
			ЗаписатьВXMLИнформациюПоКонтрагентуПартнеруИзЗапросаСпискаБлокированныхКлиентов(XML, ВыборкаПоКонтрагентамПартнерам);
			
		КонецЦикла;
		
		XML.ЗаписатьКонецЭлемента(); //d
		XML.ЗаписатьКонецЭлемента(); //o
		XML.ЗаписатьКонецЭлемента(); //data
		XML.ЗаписатьКонецЭлемента(); //scheme	
		XML.ЗаписатьКонецЭлемента(); //extdata

		СтрXML = XML.Закрыть();
		
		ЗаполнитьЗначенияСвойств(СтруктураШлюзовДляОтправки, ВыборкаПоШлюзам);
		
		СтруктураШлюзовДляОтправки.ТекстОбмена = СтрXML;
		
		МассивСтруктурШлюзовДляОтправки.Добавить(СтруктураШлюзовДляОтправки);
		
	КонецЦикла;
				
	ЗаписатьМассивСтрокВРегистрИсходящиеДанные(МассивСтруктурШлюзовДляОтправки);
	
КонецПроцедуры

Процедура ЗаписатьВXMLЗаголовкиИзЗапросаСпискаБлокированныхКлиентов(XML, ВыборкаПоШлюзам)
	
	XML.ЗаписатьНачалоЭлемента("extdata");
	XML.ЗаписатьАтрибут("user", 	ВыборкаПоШлюзам.Шлюз);
	XML.ЗаписатьАтрибут("password", ВыборкаПоШлюзам.Пароль);
	XML.ЗаписатьНачалоЭлемента("scheme");
	XML.ЗаписатьАтрибут("name", "CRMClientAddressBanEx");
	XML.ЗаписатьАтрибут("request", "set");

	XML.ЗаписатьНачалоЭлемента("data");
	
	XML.ЗаписатьНачалоЭлемента("s");
	
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMClientAddressBan" );
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CRMClientId", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "CompanyId", 			"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "AddressId",	 		"String");
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "BanDate", 				"Date");			
			ЗаписатьВXMLСтрокуСАтрибутами(XML, "f", "BanReason", 			"Integer");
		XML.ЗаписатьКонецЭлемента();
		
	XML.ЗаписатьКонецЭлемента(); //s
	
	XML.ЗаписатьНачалоЭлемента("o");
		XML.ЗаписатьНачалоЭлемента("d");
			XML.ЗаписатьАтрибут( "name", "CRMClientAddressBan" );		
КонецПроцедуры

Процедура ЗаписатьВXMLИнформациюПоКонтрагентуПартнеруИзЗапросаСпискаБлокированныхКлиентов(XML, ВыборкаПоКонтрагентамПартнерам)
	
	XML.ЗаписатьНачалоЭлемента("r");

		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.КодТорговойТочки);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.КонтрагентИНН);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.ПартнерКод);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", ВыборкаПоКонтрагентамПартнерам.ДатаОтчетаСтрокой);
		ЗаписатьВXMLСтрокуСТекст(XML, "f", "1");
		
	XML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедуры

Процедура ЗаписатьМассивСтрокВРегистрИсходящиеДанные(МассивСтруктурШлюзов)
	
	//*-
	Если МассивСтруктурШлюзов.Количество() = 0 Тогда
		Сообщить("Записывать нечего. День пуст");
		Возврат;
	КонецЕсли;
	
	ПерваяСтруктураШлюза = МассивСтруктурШлюзов[0];
	ТекущаяДата = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.Mon_ИсходящиеДанные.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидОбмена.Установить(ПерваяСтруктураШлюза.ВидОбмена);
	НаборЗаписей.Отбор.ДатаОбработки.Установить(ТекущаяДата);
	НаборЗаписей.Отбор.ДатаОтчета.Установить(ПерваяСтруктураШлюза.ДатаОтчета);
	
	Для Каждого СтруктураШлюза Из МассивСтруктурШлюзов Цикл	
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяЗапись,СтруктураШлюза); 
		НоваяЗапись.ДатаОбработки = ТекущаяДата;
		НоваяЗапись.Статус = Перечисления.Mon_СтатусыОбработкиСтрокиРегистра.НеОбработано;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры

Процедура ЗаписатьВXMLСтрокуСАтрибутами(XML, НазваниеЭлемента, Имя, Тип)
	
	XML.ЗаписатьНачалоЭлемента(НазваниеЭлемента);
		XML.ЗаписатьАтрибут( "name", Имя );
		XML.ЗаписатьАтрибут( "type", Тип );
	XML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

Процедура ЗаписатьВXMLСтрокуСТекст(XML, НазваниеЭлемента, Значение)
	
	XML.ЗаписатьНачалоЭлемента(НазваниеЭлемента);
		XML.ЗаписатьТекст(Строка(Значение));
	XML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

#КонецОбласти
